

/*************************************************************************************************
**    
**    OPERATION: FORMAT_ResultSetToOutput
**    
*************************************************************************************************/
DIALOG OPERATION
FORMAT_ResultSetToOutput( VIEW ViewToWindow )

   VIEW wXferO       REGISTERED AS wXferO
   VIEW sHost        REGISTERED AS sHost
   VIEW zqFrameOrig  REGISTERED AS zqFrame
   VIEW zqFrame      BASED ON LOD  zqFrame
   VIEW zqObjExt     BASED ON LOD  zqObjExt
   VIEW mChart       BASED ON LOD  mChart
   VIEW vLOD
   VIEW vResultSet
   VIEW KZXMLPGO
   STRING ( 50 )  szRootEntityName
   STRING ( 20 )  szGraphName
   STRING ( 20 )  szGraphTitleName
   STRING ( 400 ) szFileName
   STRING ( 25 )  szDateTime
   STRING ( 5 )   szCount
   INTEGER        nRC
   INTEGER        Count

   // Format the output based on the ResultType selected.
   TraceLineS("FORMAT THE OUTPUT", "")
   
   // If the query result is from a Summary subobject, call the special routine to format it.
   IF zqFrameOrig.SelectedObjectExtensionSummary EXISTS AND zqFrameOrig.zqFrame.wCurrentDisplayFormat != "R" 
      
      GET VIEW zqObjExt NAMED "zqObjExt"
      nRC = FormatCSV_FromSummary( zqObjExt, zqFrameOrig )
      RETURN nRC
   END

   GET VIEW vResultSet NAMED "ResultSet"
   IF RESULT < 0
      MessageSend( ViewToWindow, "wQueryNoResults", "Save Result Set",
                   "No Query Result exists.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Make sure we've reset any recursive subobject position.
   SET CURSOR FIRST zqFrameOrig.zqFrame  
   
   GET VIEW vLOD NAMED "QueryView"
   CreateViewFromView( zqFrame, zqFrameOrig )

   // Set up ordering information as requested.
   SetUpOrderingInfo( zqFrame )

   // Root List Result is an error.
   IF wXferO.QueryValues.ResultType = "L"
      MessageSend( ViewToWindow, "wQueryNotValid", "Save Result Set",
                   "Result Set list is not a valid option on this window.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Set up the Root Entity Name, which is different for Pivot Queries.
   SET CURSOR FIRST zqFrame.GeneralParameter
              WHERE zqFrame.GeneralParameter.PivotRowEntityFlag = "Y"
   IF RESULT >= zCURSOR_SET
      szRootEntityName = "ResultRow"
   ELSE
      SET CURSOR FIRST zqFrame.GeneralParameter
                 WHERE zqFrame.GeneralParameter.BreakpointType != ""
      IF RESULT >= zCURSOR_SET
         szRootEntityName = "SummaryRoot"
      ELSE
         szRootEntityName = zqFrame.zqFrame.QueryObjectRootEntityName
      END
   END


   // We need to make sure position is on ParentEntity.
   SET CURSOR FIRST zqFrameOrig.ParentEntity
   
   // KJS 08/23/19 - Trying to do file download from the Query result set page instead of going to a sub page to generate. So call this from here.
   FormatCSV_File( ViewToWindow )
   
END


/*************************************************************************************************
**    
**    OPERATION: FORMAT_ResultSetToOutput
**    
*************************************************************************************************/
DIALOG OPERATION
FORMAT_ResultSetToGraph( VIEW ViewToWindow )

   VIEW wXferO       REGISTERED AS wXferO
   VIEW zqFrameOrig  REGISTERED AS zqFrame
   VIEW zqFrame      BASED ON LOD  zqFrame
   VIEW zqObjExt     BASED ON LOD  zqObjExt
   VIEW vResultSet
   INTEGER nRC

   // Format the output based on the ResultType selected.
   
   // If the query result is from a Summary subobject, call the special routine to format it.
   IF zqFrameOrig.SelectedObjectExtensionSummary EXISTS
      GET VIEW zqObjExt NAMED "zqObjExt"
      nRC = FormatGraphFromSummary( zqObjExt, zqFrameOrig, "Chart1" )
      RETURN nRC
   ELSE

      GET VIEW vResultSet NAMED "ResultSet"
      IF RESULT < 0
         MessageSend( ViewToWindow, "wQueryNoQResults", "Save Result Set",
                      "No Query Result exists.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
      
      IF zqFrameOrig.GraphDefinition DOES NOT EXIST
         MessageSend( ViewToWindow, "wQueryNotGraphQ", "Save Result Set",
                      "This is not a Graph Query.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
      
      // Make sure we've reset any recursive subobject position.
      SET CURSOR FIRST zqFrameOrig.zqFrame  
      CreateViewFromView( zqFrame, zqFrameOrig )
   
      // Root List Result is an error.
      IF wXferO.QueryValues.ResultType = "L"
         MessageSend( ViewToWindow, "wQueryNotValid", "Save Result Set",
                      "Result Set list is not a valid option on this window.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
      
      FormatQueryForChart( zqFrame, vResultSet, "Chart1" ) 
   
      // We need to make sure position is on ParentEntity.
      SET CURSOR FIRST zqFrameOrig.ParentEntity
   END

END

/*************************************************************************************************
**    
**    OPERATION: SHOW_QuerySummary
**    
*************************************************************************************************/
DIALOG OPERATION
SHOW_QuerySummary( VIEW ViewToWindow )

   VIEW zqFrame     REGISTERED AS zqFrame
   VIEW zqObjExt    BASED ON LOD  zqObjExt
   VIEW vResultSet
   
   // Format the output to show the Query Summary values.
   GET VIEW vResultSet NAMED "ResultSet"
   BuildDisplayValues( zqObjExt, zqFrame, vResultSet )
   zqFrame.zqFrame.wCurrentDisplayFormat = "S"   // Display is for Summary.

END

/*************************************************************************************************
**    
**    OPERATION: SHOW_QuerySummaryDetail
**    
*************************************************************************************************/
DIALOG OPERATION
SHOW_QuerySummaryDetail( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqObjExt BASED ON LOD  zqObjExt
   VIEW mChart   BASED ON LOD  mChart
   VIEW vResultSet
   STRING ( 1 ) szFoundFlag
   
   // Format the output to show the display parameters of zqFrame.
   // We will first make sure that there exists at least one displayable attribute that is on the Root entity or on
   // a 1-to-1 child of the Root. Otherwise, there is nothing valid to show.
   szFoundFlag = ""
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.ListDisplayFlag = "Y"
      SET CURSOR FIRST zqFrame.QueryAttribute 
                 WHERE zqFrame.QueryAttribute.MappingEntityName = zqFrame.GeneralParameter.EntityName
                   AND zqFrame.QueryAttribute.AttributeName     = zqFrame.GeneralParameter.AttributeName 
      IF RESULT >= zCURSOR_SET 
         szFoundFlag = "Y"
      END
   END
   IF szFoundFlag = ""
      MessageSend( ViewToWindow, "Show", "", "The Query does not have valid detail data to display.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END 
   
   // Make sure we're not adding to an existing mChart entry.
   GET VIEW mChart NAMED "mChart"
   IF RESULT >= 0
      DropObjectInstance( mChart )
   END
   
   GET VIEW vResultSet NAMED "ResultSet" 
   FormatResultSetList( zqFrame, vResultSet )
   zqFrame.zqFrame.wCurrentDisplayFormat = "R"   // Display is for Regular.

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_DisplayQueryView
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_DisplayQueryView( VIEW ViewToWindow )

   VIEW wXferO   REGISTERED AS wXferO
   VIEW zqSQuery BASED ON LOD  zqSQuery
   VIEW QueryView
   INTEGER nRC
   
   MessageSend( ViewToWindow, "", "", "Currently not Active.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   RETURN 2

   // We will currently just create a new zqFrame object for the selected LOD and use the Object Tree Display
   // subobject created there.
   /*nRC = SelectQueryViewForNewQuery( ViewToWindow )
   IF nRC = 2
      RETURN 2
   END
   GET VIEW zqSQuery NAMED "zqSQuery"
   
   // Initialize data for QueryUpdate.
   InitializeQueryUpdate( ViewToWindow )*/

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_ObjectDisplayList
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_ObjectDisplayList( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqSQuery REGISTERED AS zqSQuery
   VIEW QueryView
   
   // Simply drop the new Frame.
   DropObjectInstance( zqFrame )
   DropObjectInstance( zqSQuery )
   GET VIEW QueryView NAMED "QueryView"
   IF RESULT >= 0
      DropObjectInstance( QueryView )
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_SelectIA_Query
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_SelectIA_Query( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   VIEW zqSCatagLST BASED ON LOD  zqSCatag
   
   // Make sure a non-blank entry is selected.
   IF wXferO.QueryObject.ExternalName = ""
      MessageSend( ViewToWindow, "ObjectReq", "", "Object is required.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Activate the Query list and indicate that have been listed.
   wXferO.QueryValues.SelectQueryListAllFlag = "Y"
   wXferO.Root.CurrentFunction = "GenerateResultSet"
   
   // Make sure list of Stored Query Catagories exists.
   GET VIEW zqSCatagLST NAMED "zqSCatagLST"
   IF RESULT < 0
       ACTIVATE zqSCatagLST RootOnlyMultiple
       NAME VIEW zqSCatagLST "zqSCatagLST"    
   END
   
   // Activate without User selection.
   ACTIVATE zqSQueryLST Multiple
            WHERE zqSQueryLST.StoredQuery.ObjectName = wXferO.QueryObject.ObjectName
              AND zqSQueryLST.StoredQuery.Type = "S"
   NAME VIEW zqSQueryLST "zqSQueryLST"
   
   FOR EACH zqSQueryLST.StoredQuery 
      IF zqSQueryLST.StoredQueryCategory EXISTS
         zqSQueryLST.StoredQuery.wCategoryName = zqSQueryLST.StoredQueryCategory.Name 
      END
   END
   OrderEntityForView( zqSQueryLST, "StoredQuery", "wCategoryName A Name A" )
   SET CURSOR FIRST zqSQueryLST.StoredQuery 

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildQueryResult
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildQueryResult( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW zqObjExt  BASED ON LOD  zqObjExt
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC
   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Advanced Queries","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
     
   // Initialize 
   IF sHost.Host.QueryLODsSourceDirectory = ""
      MessageSend( ViewToWindow, "wQueryInitDir", "",
                   "You must initialize the 'Query LOD Directory' value in System Administration / Host before using Query functionality.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   END
   
   // If the query being displayed is a Summary Extension, then make xxx buttons visible.
   // Otherwise, make them invisible.
   GET VIEW zqObjExt NAMED "zqObjExt"
   IF RESULT >= 0
      SetCtrlState( ViewToWindow, "PBShowSummary", zCONTROL_STATUS_VISIBLE, TRUE )
      SetCtrlState( ViewToWindow, "PBShowDetail", zCONTROL_STATUS_VISIBLE, TRUE )
   ELSE
      SetCtrlState( ViewToWindow, "PBShowSummary", zCONTROL_STATUS_VISIBLE, FALSE )
      SetCtrlState( ViewToWindow, "PBShowDetail", zCONTROL_STATUS_VISIBLE, FALSE )
   END

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_QueryResult
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_QueryResult( VIEW ViewToWindow )

   VIEW zqObjExt BASED ON LOD  zqObjExt
   VIEW zqFrame  BASED ON LOD  zqFrame
   
   GET VIEW zqFrame NAMED "zqFrame"
   IF RESULT >= 0
      DropObjectInstance( zqFrame )
   END
   GET VIEW zqObjExt NAMED "zqObjExt"
   IF RESULT >= 0
      DropObjectInstance( zqObjExt )
   END

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildQueryUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildQueryUpdate( VIEW ViewToWindow )

   VIEW sAppMgr     REGISTERED AS sAppMgr
   VIEW zqSCatagLST BASED ON LOD  zqSCatag
   VIEW wQueryWk    BASED ON LOD  wQueryWk
   STRING ( 100 ) szLangConv
   STRING ( 1 )   szNewQueryObjectFlag
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   INTEGER        nRC
      // Make sure list of Stored Query Catagories exists.
   GET VIEW zqSCatagLST NAMED "zqSCatagLST"
   IF RESULT < 0
       ACTIVATE zqSCatagLST RootOnlyMultiple
       NAME VIEW zqSCatagLST "zqSCatagLST"    
   END
   
   // Make sure Query work object exists.
   GET VIEW wQueryWk NAMED "wQueryWk"
   IF RESULT < 0
      ACTIVATE wQueryWk EMPTY 
      NAME VIEW wQueryWk "wQueryWk" 
      CREATE ENTITY wQueryWk.QueryWork 
      CREATE ENTITY wQueryWk.DerivedAttribute     // Blank entry for list 
      
      // Add esch derived attribute as a selectable work entity.
      szEntityName = "QueryWork"
      nRC = zGetFirstAttributeNameForEntity( wQueryWk, szEntityName, szAttributeName )
      LOOP WHILE nRC >= 0
         CREATE ENTITY wQueryWk.DerivedAttribute 
         wQueryWk.DerivedAttribute.AttributeName = szAttributeName 
         nRC = zGetNextAttributeNameForEntity( wQueryWk, szEntityName, szAttributeName )
      END
   END
   SET CURSOR FIRST wQueryWk.DerivedAttribute 

   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Query Detail","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildParameterUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildParameterUpdate( VIEW ViewToWindow )

   VIEW sAppMgr   REGISTERED AS sAppMgr
   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Parameters","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv

END
/*************************************************************************************************
**    
**    OPERATION: PostbuildQuerySelect
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildObjectList( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC
   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Object","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildQuerySelect
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildQuerySelect( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC
   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Query Select","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildQuerySelect
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildGraphDefUpdate( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC
   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Graph Definition","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildContactList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildContactList( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC
   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Contact List","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
END
/*************************************************************************************************
**    
**    OPERATION: PostbuildRecurringList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildRecurringList( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC

   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Recurring Contact List","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
END
/*************************************************************************************************
**    
**    OPERATION: PostbuildRecurringList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildObjectMapping( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC

   STRING ( 100 ) szLangConv
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Object Mapping","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
END
/*************************************************************************************************
**    
**    OPERATION: PostbuildCategories
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildFormatFile( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   STRING ( 100 ) szLangConv
   INTEGER        nRC
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"File","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
END
/*************************************************************************************************
**    
**    OPERATION: PostbuildCategories
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildEntityPath( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   STRING ( 100 ) szLangConv
   INTEGER        nRC
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Entity","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
END
/*************************************************************************************************
**    
**    OPERATION: PostbuildCategories
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildCategories( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   STRING ( 100 ) szLangConv
   INTEGER        nRC
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Category","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildCategories
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildUpdateCalendar( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   STRING ( 100 ) szLangConv
   INTEGER        nRC
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Date","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildDocument
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildDocument( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sHost      REGISTERED AS sHost
   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW zqCDocOLST BASED ON LOD  zqCDocO
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   STRING ( 100 ) szLangConv
   INTEGER        nRC

   // Make sure list of Document Categories exists.
   GET VIEW zqCDocOLST NAMED "zqCDocOLST"
   IF RESULT < 0
      ACTIVATE zqCDocOLST RootOnlyMultiple 
      NAME VIEW zqCDocOLST "zqCDocOLST" 
   END
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Document Merge Detail","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildDocMaintList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildDocMaintList( VIEW ViewToWindow )

   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW wXferO     REGISTERED AS wXferO
   VIEW sAppMgrT   BASED ON LOD  sAppMgr
   STRING ( 100 ) szLangConv
   
   // Make sure Document list is always sorted.
   IF zqMDocOLST.Document EXISTS
      OrderEntityForView( zqMDocOLST, "Document", "Name A" )
      SET CURSOR FIRST zqMDocOLST.Document 
   END
   
   IF wXferO.QueryValues DOES NOT EXIST
      CREATE ENTITY wXferO.QueryValues  
   END
   IF wXferO.FunctionalArea DOES NOT EXIST
      CreateViewFromView( sAppMgrT, sAppMgr )
      FOR EACH sAppMgrT.FunctionalArea 
         CREATE ENTITY wXferO.FunctionalArea 
         wXferO.FunctionalArea.FunctionalAreaName  = sAppMgrT.FunctionalArea.FunctionalAreaName   
      END 
      OrderEntityForView( wXferO, "FunctionalArea", "FunctionalAreaName A" )
      SET CURSOR FIRST wXferO.FunctionalArea
      DropView( sAppMgrT )
   END
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Document Merge List","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildDocMaintList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildDocMaintSelect( VIEW ViewToWindow )

   VIEW sAppMgr    REGISTERED AS sAppMgr
   STRING ( 100 ) szLangConv
      
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Document Template Select","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv

END

/*************************************************************************************************
**    
**    OPERATION: DELETE_StoredQuery
**    
*************************************************************************************************/
DIALOG OPERATION
DELETE_StoredQuery( VIEW ViewToWindow )

   VIEW zqSQuery    BASED ON LOD  zqSQuery
   VIEW zqSQueryLST REGISTERED AS zqSQueryLST
   VIEW mUser       BASED ON LOD  mUser
   SHORT nRC
   STRING ( 1000 ) szMsg

   // Check to see if this Query is private and if so, if this User created it.
   GET VIEW mUser NAMED "mUser"
   IF RESULT < 0
      GET VIEW mUser NAMED "mUserCurrent"
   END
   IF zqSQueryLST.StoredQuery.PrivateFlag = "Y"
      IF zqSQueryLST.CreatingUser EXISTS
         IF zqSQueryLST.CreatingUser.ID != mUser.User.ID
            MessageSend( ViewToWindow, "wQueryNoDel", "Delete Query",
                         "A private Query can only be deleted by the User who created it.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN 2
         END
      END
   END
   
   // Activate the Query to be deleted.
   ACTIVATE zqSQuery WHERE zqSQuery.StoredQuery.ID = zqSQueryLST.StoredQuery.ID
   NAME VIEW zqSQuery "zqSQueryDelete"
   

   // Delete the Query, along with any Recurring Contact Lists.
   DELETE ENTITY zqSQuery.StoredQuery
   COMMIT zqSQuery
   DropObjectInstance( zqSQuery )

   // Remove the entry from the list.
   DropEntity( zqSQueryLST, "StoredQuery", zREPOS_NONE )

END

/*************************************************************************************************
**    
**    OPERATION: DUPLICATE_StoredQuery
**    
*************************************************************************************************/
DIALOG OPERATION
DUPLICATE_StoredQuery( VIEW ViewToWindow )

   VIEW zqSQueryLST REGISTERED AS zqSQueryLST
   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQuery    BASED ON LOD  zqSQuery
   VIEW zqSQueryNew BASED ON LOD  zqSQuery
   VIEW mUser       BASED ON LOD  mUser
   STRING ( 64 ) szNewName

   // Simply duplicate the selected StoredQuery

   // Activate Selected Stored Query.
   ACTIVATE zqSQuery WHERE zqSQuery.StoredQuery.ID = zqSQueryLST.StoredQuery.ID

   // Create new Stored Query with the same values.
   ACTIVATE zqSQueryNew EMPTY
   NAME VIEW zqSQueryNew "zqSQueryNew"
   CREATE ENTITY zqSQueryNew.StoredQuery
   SetMatchingAttributesByName( zqSQueryNew, "StoredQuery",
                                zqSQuery,    "StoredQuery", zSET_NULL )
   szNewName = "Copy of " + zqSQuery.StoredQuery.Name 
   zqSQueryNew.StoredQuery.Name = szNewName
   zqSQueryNew.StoredQuery.PrivateFlag = ""
   
   IF zqSQuery.StoredQueryCategory EXISTS
      INCLUDE zqSQueryNew.StoredQueryCategory FROM zqSQuery.StoredQueryCategory
   END
   GET VIEW mUser NAMED "mUser"
   IF RESULT < 0
      GET VIEW mUser NAMED "mUserCurrent"
   END
   INCLUDE zqSQueryNew.CreatingUser FROM mUser.User
   COMMIT zqSQueryNew

   // Add the entry to the list.
   CREATE ENTITY zqSQueryLST.StoredQuery
   SetMatchingAttributesByName( zqSQueryLST, "StoredQuery",
                                zqSQueryNew, "StoredQuery", zSET_ALL )
   INCLUDE zqSQueryLST.CreatingUser FROM zqSQueryNew.CreatingUser
   IF zqSQuery.StoredQueryCategory EXISTS
      INCLUDE zqSQueryLST.StoredQueryCategory FROM zqSQueryNew.StoredQueryCategory
   END

   DropObjectInstance( zqSQueryNew )
   DropObjectInstance( zqSQuery )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_QueryNew
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_QueryNew( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQuery    BASED ON LOD  zqSQuery
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW mQryObExLST BASED ON LOD  mQryObEx
   VIEW QueryView
   INTEGER nRC

   // Special Type, update the stored query created in SetUpForNewQuery.
   IF wXferO.QueryValues.QueryType = ""
      wXferO.QueryValues.QueryType = "S" 
   END
   nRC = SetUpForNewQuery( zqFrame, ViewToWindow )
   IF nRC = 2
      RETURN 2
   END
   GET VIEW zqSQuery NAMED "zqSQuery"
   
   // Initialize data for QueryUpdate.
   GET VIEW zqFrame NAMED "zqFrame"
   GET VIEW QueryView NAMED "QueryView"
   InitQueryUpdate( zqFrame, QueryView )
   //InitializeQueryUpdate( ViewToWindow )
   
   // Remove all General Parameter entries to begin with.
   GET VIEW zqFrame NAMED "zqFrame"
   FOR EACH zqFrame.GeneralParameter 
      DELETE ENTITY zqFrame.GeneralParameter NONE 
   END
   
   // Activate the list of Query Object Extensions for the selected Object.
   ACTIVATE mQryObExLST Multiple WHERE mQryObExLST.QueryObjectExtension.ObjectName = wXferO.QueryObject.ObjectName 
   NAME VIEW mQryObExLST "mQryObExLST"
   OrderEntityForView( mQryObExLST, "QueryObjectExtension", "ExtensionName A" )
   SET CURSOR FIRST mQryObExLST.QueryObjectExtension  

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_UpdateStoredQuery
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_UpdateStoredQuery( VIEW ViewToWindow )

   VIEW zqSQueryLST REGISTERED AS zqSQueryLST
   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQuery    BASED ON LOD  zqSQuery
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW zqFrameRoot BASED ON LOD  zqFrame
   VIEW mUser       BASED ON LOD  mUser
   VIEW mQryObExLST BASED ON LOD  mQryObEx
   VIEW QueryView
   VIEW QueryViewRecurs
   STRING ( 50 )  ReportTitle
   STRING ( 32 )  szRootEntityName
   INTEGER        nRC

   // Update the selected Stored Query from the items selected in the list.
   // Note that if we already have the three objects in memory:
   //    zqSQuery
   //    zqFrame
   //    QueryView
   // We must rename them because we don't want to lose them and yet we will be creating
   // objects with the same names for the QueryUpdate window.
   // We will then use the reusable Activate operation.

   GET VIEW mUser NAMED "mUser"
   IF RESULT < 0
      GET VIEW mUser NAMED "mUserCurrent"
   END

   // On 2/26/2020 DoC removed the following code as it didn't seem to make sense in the new structure.
   // Rename any current views.
   /*GET VIEW zqSQuery NAMED "zqSQuery"
   IF RESULT >= 0
      NAME VIEW zqSQuery "zqSQuerySave"
      DropNameForView( zqSQuery, "zqSQuery", ViewToWindow, zLEVEL_TASK )
   END
   GET VIEW zqFrame NAMED "zqFrame"
   IF RESULT >= 0
      NAME VIEW zqFrame "zqFrameSave"
      DropNameForView( zqFrame, "zqFrame", ViewToWindow, zLEVEL_TASK )
   END
   GET VIEW QueryView NAMED "QueryView"
   IF RESULT >= 0
      NAME VIEW QueryView "QueryViewSave"
      DropNameForView( QueryView, "QueryView", ViewToWindow, zLEVEL_TASK )
   END*/

   // Activate zqSQuery from Stored Query list.
   // Also create zqFrame from zqSQuery.

   // Activate the stored query instance that stores the query.
   ACTIVATE zqSQuery WHERE zqSQuery.StoredQuery.ID = zqSQueryLST.StoredQuery.ID
   NAME VIEW zqSQuery "zqSQuery"
   wXferO.QueryValues.QueryObjectName        = zqSQuery.StoredQuery.ObjectName
   wXferO.QueryValues.CurrentStoredQueryName = zqSQuery.StoredQuery.Name

   // Make sure the User is included.
   IF zqSQuery.CreatingUser DOES NOT EXIST
      INCLUDE zqSQuery.CreatingUser FROM mUser.User
   END

   // Create the query instance (an instance of zqFrame).
   SetOI_FromBlob( zqFrame, 0, ViewToWindow,
                   zqSQueryLST, "StoredQuery", "QueryBlob", zIGNORE_ERRORS )
   NAME VIEW zqFrame "zqFrame" 
   IF zqSQuery.StoredQuery.ReportTitle = ""
      zqFrame.zqFrame.ReportTitle = zqSQuery.StoredQuery.Name
   ELSE
      zqFrame.zqFrame.ReportTitle = zqSQuery.StoredQuery.ReportTitle
   END
   zqFrame.zqFrame.CountOfReturnedRoots = ""
   wXferO.QueryValues.QueryObjectName = zqSQuery.StoredQuery.ObjectName
   
   // Activate the Query LOD (Query View).
   nRC = ActivateQueryViewByName( ViewToWindow, QueryView, zqSQuery.StoredQuery.ObjectName )
   IF nRC < 0
      MessageSend( ViewToWindow, "wQueryNotLoaded", "Select Query",
                   "Query LOD cannot be loaded.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      DropObjectInstance( zqFrame )
      DropObjectInstance( zqSQuery )
      RETURN 2
   END
   
   SetFrameStructure( zqFrame, QueryView )
   
   // Activate the list of Query Object Extensions for the Object associated with the Query.
   // Activate the list of Query Object Extensions for the selected Object.
   ACTIVATE mQryObExLST Multiple WHERE mQryObExLST.QueryObjectExtension.ObjectName = zqFrame.zqFrame.QueryObjectName  
   NAME VIEW mQryObExLST "mQryObExLST"
   OrderEntityForView( mQryObExLST, "QueryObjectExtension", "ExtensionName A" )
   SET CURSOR FIRST mQryObExLST.QueryObjectExtension 
   
   // If the zqFrame object has an an Extension, include the Extension derived entity for the include combo box.
   IF zqFrame.SelectedObjectExtensionSummary EXISTS 
      SET CURSOR FIRST mQryObExLST.QueryObjectExtension 
                 WHERE mQryObExLST.QueryObjectExtension.ExtensionName = zqFrame.SelectedObjectExtensionSummary.Name 
      IF RESULT >= zCURSOR_SET
         INCLUDE zqFrame.SelectedQueryObjectExtension FROM mQryObExLST.QueryObjectExtension 
      END
      SET CURSOR FIRST mQryObExLST.QueryObjectExtension
   END

END

/*************************************************************************************************
**    
**    OPERATION: RUN_SelectedQueryFromAnalysis
**    
*************************************************************************************************/
DIALOG OPERATION
RUN_SelectedQueryFromAnalysis( VIEW ViewToWindow )

   VIEW zqSQueryLST REGISTERED AS zqSQueryLST
   VIEW wXferO      REGISTERED AS wXferO
   VIEW wXferO2     BASED ON LOD  wXferO
   //VIEW mEvent      BASED ON LOD  mEvent
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW mUser       BASED ON LOD  mUser
   VIEW zqObjExt    BASED ON LOD  zqObjExt
   VIEW QueryTarget
   VIEW vResultSet
   SHORT nRC

   // What happens in this operation depends upon where we came from as identified in the
   // attribute, wXferO.Root.CurrentFunction.
   // 1. If "IncludeStoredQuery", include the StoredQuery into that object and return. Note
   //    that the StoredQuery entity in the target object must be named "StoredQuery".
   // 2. If "CreateDynamicContactList", include the StoredQuery into the Event
   //    and take the operator to the mPlanD.ContactListUpdate window.
   // 3. If "CreateContactList", run whatever Query is selected and take the
   //    operator to the mAnalD.ResultSetForContactList window.
   // 4. If "GenerateResultSet", run whatever Query is selected and return to the
   //    ResultSet list window.

   IF wXferO.Root.CurrentFunction = "IncludeStoredQuery"
      // Include the selected Query into the target object named QueryTarget. This allows this
      // code to be reused in selecting a Query to be included into any object.
      GET VIEW QueryTarget NAMED "QueryTarget"
      INCLUDE QueryTarget.StoredQuery FROM zqSQueryLST.StoredQuery
      DropNameForView( QueryTarget, "QueryTarget", 0, zLEVEL_TASK )
      //DropObjectInstance( zqSQueryLST )
   ELSE
      IF wXferO.Root.CurrentFunction = "CreateStoredQuery"
         // Create a new StoredQuery into the target object named QueryTarget from the  source object.
         GET VIEW QueryTarget NAMED "QueryTarget"
         IF QueryTarget.StoredQuery EXISTS
            DELETE ENTITY QueryTarget.StoredQuery
         END
         CREATE ENTITY QueryTarget.StoredQuery
         SetMatchingAttributesByName( QueryTarget, "StoredQuery",
                                      zqSQueryLST, "StoredQuery", zSET_NULL )
         SetAttributeFromString( QueryTarget, "StoredQuery", "Type", "M" )
         GET VIEW mUser NAMED "mUser"
         IF RESULT < 0
            GET VIEW mUser NAMED "mUserCurrent"
         END
         IncludeSubobjectFromSubobject( QueryTarget, "CreatingUser",
                                        mUser, "User", zPOS_AFTER )
         IncludeSubobjectFromSubobject( QueryTarget, "CreatingStoredQuery",
                                        zqSQueryLST, "StoredQuery", zPOS_AFTER )
         /*GET VIEW mReport NAMED "mReport"
         IF RESULT >= 0
            IncludeSubobjectFromSubobject( mReport,     "OriginatingStoredQuery",
                                           zqSQueryLST, "StoredQuery", zPOS_AFTER )
         END*/
         DropNameForView( QueryTarget, "QueryTarget", 0, zLEVEL_TASK )
         //DropObjectInstance( zqSQueryLST )
      ELSE
         IF wXferO.Root.CurrentFunction = "CreateDynamicContactList"
            /*GET VIEW mEvent NAMED "mEvent"
            CreateTemporalEntity( mEvent, "ContactList", zPOS_AFTER )
            SetAttributeFromCurrentDateTime( mEvent, "ContactList", "DateGenerated" )
            SetOI_FromBlob( zqFrame, 0, ViewToWindow,
                            zqSQueryLST, "StoredQuery", "QueryBlob", zIGNORE_ERRORS )
            DropObjectInstance( zqFrame )
            GET VIEW mUser NAMED "mUser"
            IF RESULT < 0
               GET VIEW mUser NAMED "mUserCurrent"
            END
            INCLUDE mEvent.AdministrativeDivision FROM mUser.CurrentAdministrativeDivision
            CreateViewFromView( wXferO2, wXferO )
            SET CURSOR FIRST wXferO2.QueryObject
                       WHERE wXferO2.QueryObject.ObjectName = zqSQueryLST.StoredQuery.ObjectName
            mEvent.ContactList.Type = wXferO2.QueryObject.ContactListType
            DropView( wXferO2 )
            mEvent.ContactList.DynamicFlag = "Y"
            INCLUDE mEvent.DynamicStoredQuery FROM zqSQueryLST.StoredQuery
            DropObjectInstance( zqSQueryLST )
            SetWindowActionBehavior( ViewToWindow, zWAB_ReplaceWindowWithModalWindow,
                                     "mPlanD", "ContactListUpdate" )*/
         ELSE
            IF wXferO.Root.CurrentFunction = "CreateContactList"
               /*nRC = ExecuteQueryForContactList( zqSQueryLST )
               IF nRC < 0
                  SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
                  RETURN -1
               END
               DropObjectInstance( zqSQueryLST )
               SetWindowActionBehavior( ViewToWindow, zWAB_ReplaceWindowWithModalWindow,
                                        "mAnalD", "ResultSetForContactList" )*/
            ELSE
               IF wXferO.Root.CurrentFunction = "GenerateResultSet"
                  nRC = ExecQueryForGenerate( zqSQueryLST )
                  IF nRC < 0
                     MessageSend( ViewToWindow, "NoResults", "Save Result Set",
                                  "No Results Found",
                                  zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                     RETURN 2
                  END
                  
                  GET VIEW zqFrame NAMED "zqFrame"
                  GET VIEW vResultSet NAMED "ResultSet"
                  IF zqFrame.SelectedObjectExtensionSummary EXISTS
                     // Output is to be formatted from Summary data.
                     BuildDisplayValues( zqObjExt, zqFrame, vResultSet )
                  ELSE
                     // Output is to be formatted regularly.
                     // Modify the ResultSetMain window with the display parameters of zqFrame.
                     FormatResultSetList( zqFrame, vResultSet )
                     wXferO.QueryValues.CurrentStoredQueryName = zqSQueryLST.StoredQuery.Name
                     //DropObjectInstance( zqSQueryLST )
                  END
               END
            END
         END
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: RESYNC_SelectedReports
**    
*************************************************************************************************/
DIALOG OPERATION
RESYNC_SelectedReports( VIEW ViewToWindow )



END

/*************************************************************************************************
**    
**    OPERATION: FILTER_QueryListByUser
**    
*************************************************************************************************/
DIALOG OPERATION
FILTER_QueryListByUser( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW sAppMgr     BASED ON LOD  sAppMgr
   VIEW mUserLST    BASED ON LOD  mUser
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   
   // Drop current list.
   GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0
      DropObjectInstance( zqSQueryLST )
   END

   // Return list of entries for selected User.
   GetViewByName( mUserLST, "mUserLST", ViewToWindow, zLEVEL_TASK )
   GetViewByName( sAppMgr, "sAppMgr", ViewToWindow, zLEVEL_TASK )
   IF sAppMgr.FunctionalArea.FunctionalAreaName = ""
      // The functional area is General Query
      ACTIVATE zqSQueryLST Multiple
               WHERE ( zqSQueryLST.CreatingUser.ID = mUserLST.User.ID OR zqSQueryLST.StoredQuery.Type = "G" )
                   AND zqSQueryLST.StoredQuery.ObjectName = wXferO.QueryObject.ObjectName
               //RESTRICTING zqSQueryLST.UsingReport TO zqSQueryLST.UsingReport.ID = 0
   ELSE
      ACTIVATE zqSQueryLST Multiple
               WHERE zqSQueryLST.CreatingUser.ID = mUserLST.User.ID
                 AND zqSQueryLST.StoredQuery.ObjectName = wXferO.QueryObject.ObjectName
                 AND zqSQueryLST.StoredQuery.Type = "S"
               //RESTRICTING zqSQueryLST.UsingReport TO zqSQueryLST.UsingReport.ID = 0
   END
   NAME VIEW zqSQueryLST "zqSQueryLST"
   FOR EACH zqSQueryLST.StoredQuery 
      IF zqSQueryLST.StoredQueryCategory EXISTS
         zqSQueryLST.StoredQuery.wCategoryName = zqSQueryLST.StoredQueryCategory.Name 
      END
   END
   OrderEntityForView( zqSQueryLST, "StoredQuery", "wCategoryName A Name A" )
   SET CURSOR FIRST zqSQueryLST.StoredQuery  

END

/*************************************************************************************************
**    
**    OPERATION: FILTER_QueryListAllUsers
**    
*************************************************************************************************/
DIALOG OPERATION
FILTER_QueryListAllUsers( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW sAppMgr     BASED ON LOD  sAppMgr
   VIEW mUserLST    BASED ON LOD  mUser
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   
   // Drop current list.
   GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0
      DropObjectInstance( zqSQueryLST )
   END

   // Return list of entries for selected User.
   GetViewByName( mUserLST, "mUserLST", ViewToWindow, zLEVEL_TASK )
   GetViewByName( sAppMgr, "sAppMgr", ViewToWindow, zLEVEL_TASK )
   IF sAppMgr.FunctionalArea.FunctionalAreaName = ""
      // The functional area is General Query
      ACTIVATE zqSQueryLST Multiple
               WHERE ( zqSQueryLST.StoredQuery.Type = "S" OR zqSQueryLST.StoredQuery.Type = "G" )
                   AND zqSQueryLST.StoredQuery.ObjectName = wXferO.QueryObject.ObjectName
               //RESTRICTING zqSQueryLST.UsingReport TO zqSQueryLST.UsingReport.ID = 0
   ELSE
      ACTIVATE zqSQueryLST Multiple
               WHERE zqSQueryLST.StoredQuery.Type = "S"
                 AND zqSQueryLST.StoredQuery.ObjectName = wXferO.QueryObject.ObjectName
               //RESTRICTING zqSQueryLST.UsingReport TO zqSQueryLST.UsingReport.ID = 0
   END
   NAME VIEW zqSQueryLST "zqSQueryLST"
   FOR EACH zqSQueryLST.StoredQuery 
      IF zqSQueryLST.StoredQueryCategory EXISTS
         zqSQueryLST.StoredQuery.wCategoryName = zqSQueryLST.StoredQueryCategory.Name 
      END
   END
   OrderEntityForView( zqSQueryLST, "StoredQuery", "wCategoryName A Name A" )
   SET CURSOR FIRST zqSQueryLST.StoredQuery  

END

/*************************************************************************************************
**    
**    OPERATION: DUPLICATE_QueryRow
**    
*************************************************************************************************/
DIALOG OPERATION
DUPLICATE_QueryRow( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqFrame2 BASED ON LOD  zqFrame

   // Duplicate the GeneralParameter entry for defining multiple qualifications on the same attribute.
   CreateViewFromView( zqFrame2, zqFrame )
   CREATE ENTITY zqFrame2.GeneralParameter
   SetMatchingAttributesByName( zqFrame2, "GeneralParameter",
                                zqFrame,  "GeneralParameter", zSET_ALL )
   zqFrame2.GeneralParameter.ScopingEntityName = ""
   FOR EACH zqFrame.GeneralSubParameter
      CREATE ENTITY zqFrame2.GeneralSubParameter
      SetMatchingAttributesByName( zqFrame2, "GeneralSubParameter",
                                   zqFrame,  "GeneralSubParameter", zSET_ALL )
   END
   SET CURSOR FIRST zqFrame.GeneralSubParameter
   SET CURSOR FIRST zqFrame2.GeneralSubParameter
   DropView( zqFrame2 )


END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_QueryUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_QueryUpdate( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQuery    BASED ON LOD  zqSQuery
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   VIEW QueryView
   STRING ( 50 )  ReportTitle

   // Processing here depends on where we came from, as follows.
   // 1. We came from FinAidSource Query, so manage zqSQuery and zqFrame accordingly.
   // 2. We came from Query List (list exists), so drop current views and restore saved
   //    ones if they exist.
   // 3. We came from Current Query Update (list doesn't exist), so don't drop anything.
   
   GET VIEW zqSQuery NAMED "zqSQuery"
   IF RESULT >= 0
   
      /*IF zqSQuery.FinAidSource EXISTS
         // Came from FinAidSource Query.
         // Get rid of both zqFrame and zqSQuery, if zqFrame is empty, meaning there is not select criteria.
         SET CURSOR FIRST zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.SearchType != ""
         IF RESULT < zCURSOR_SET AND zqSQuery.StoredQuery.ID = ""
            DropObjectInstance( zqFrame )
            DELETE ENTITY zqSQuery.StoredQuery 
            DropObjectInstance( zqSQuery )
            GET VIEW QueryView NAMED "QueryView"
            IF RESULT >= 0
               DropObjectInstance( QueryView )
            END
         END 
         RETURN 
      END*/
      
      
   END
   
   // If there is a Saved zqFrame object, rename it to zqFrame, since we must be canceling the update function and returning to the original.
   GET VIEW zqFrame NAMED "zqFrameSave"
   IF RESULT >= 0
      NAME VIEW zqFrame "zqFrame"
      DropNameForView( zqFrame, "zqFrameSave", ViewToWindow, zLEVEL_TASK )
   END

   // If we came from the Query List,
   //   Check to see if the Query has changed and if it has, prompt operator for save.
   //   Also restore any old zqSQuery, zqFrame and QueryView object names. These would
   //   exist if we got to this window from the Stored Query list when a current query
   //   was defined in memory.

   // The following was removed by DonC on 2/26/2020 because it no longer appears needed.
   /*GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0
      // Drop current Query views.
      GET VIEW zqFrame NAMED "zqFrame"
      IF RESULT >= 0
         DropObjectInstance( zqFrame )
      END
      GET VIEW zqSQuery NAMED "zqSQuery"
      IF RESULT >= 0
         DropObjectInstance( zqSQuery )
      END
      GET VIEW QueryView NAMED "QueryView"
      IF RESULT >= 0
         DropObjectInstance( QueryView )
      END
      // Rename any saved views back to their original names.
      GET VIEW zqSQuery NAMED "zqSQuerySave"
      IF RESULT >= 0
         NAME VIEW zqSQuery "zqSQuery"
         DropNameForView( zqSQuery, "zqSQuerySave", ViewToWindow, zLEVEL_TASK )
      END
      GET VIEW zqFrame NAMED "zqFrameSave"
      IF RESULT >= 0
         NAME VIEW zqFrame "zqFrame"
         DropNameForView( zqFrame, "zqFrameSave", ViewToWindow, zLEVEL_TASK )
      END
      GET VIEW QueryView NAMED "QueryViewSave"
      IF RESULT >= 0
         NAME VIEW QueryView "QueryView"
         DropNameForView( QueryView, "QueryViewSave", ViewToWindow, zLEVEL_TASK )
      END
   END*/

END

/*************************************************************************************************
**    
**    OPERATION: EXPAND_CONTRACT_GeneralParms
**    
*************************************************************************************************/
DIALOG OPERATION
EXPAND_CONTRACT_GeneralParms( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   VIEW QueryView

   // Expand or Contract the GeneralParameter entries depending on the ContractedFlag.

   GET VIEW QueryView NAMED "QueryView"
   IF zqFrame.zqFrame.ContractedFlag = "Y"
      // The request is to contract the entries, so delete all non-selected entries.
      FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.wSelectedToShow = "" 
         DELETE ENTITY zqFrame.GeneralParameter NONE
      END
   ELSE
      // The request is to expand the entries.
      ExpandGeneralParms( zqFrame, QueryView )
   END
   SET CURSOR FIRST zqFrame.GeneralParameter 
   SET CURSOR FIRST zqFrame.ObjectEntity 

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_ScopingEntity
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_ScopingEntity( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   INTEGER nRC

   // Null the ScopingEntityZkey because we're changing values.
   zqFrame.GeneralParameter.ScopingEntityZKey = ""
   
   // Set the ScopingEntityName from the included ScopingQueryEntity.
   // We are doing this because the original MS Windows version used "Set Foreign Key", which set the
   // zqFrame.GeneralParameter.ScopingEntityName value.
   IF zqFrame.ScopingQueryEntity EXISTS
      zqFrame.GeneralParameter.ScopingEntityName = zqFrame.ScopingQueryEntity.EntityName 
   ELSE
      zqFrame.GeneralParameter.ScopingEntityName = ""
   END
   
   // If the Scoping entity is null, make sure that the RootQualificationFlag is turned off.
   IF zqFrame.GeneralParameter.ScopingEntityName = ""
      IF zqFrame.GeneralParameter.RootQualificationFlag = "Y"
         zqFrame.GeneralParameter.RootQualificationFlag = ""
      END
   END
   
   // If a Scoping Entity and a Qualification entry have been selected, make sure they are valid for the
   // GeneralParameter EntityName for which they are entered.
   IF zqFrame.GeneralParameter.SearchType != "" AND zqFrame.GeneralParameter.ScopingEntityName != ""
      nRC = ValidateScopingEntity( zqFrame )
      IF nRC = 2
         RETURN 2
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_DerivedQualification
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_DerivedQualification( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW wQueryWk REGISTERED AS wQueryWk
   
   // Create or Remove 
   IF wQueryWk.DerivedAttribute.AttributeName = ""
      // The select is to remove any DerivedAttribute entry.
      IF zqFrame.DerivedQualAttribute EXISTS
         DELETE ENTITY zqFrame.DerivedQualAttribute   
      END
   ELSE
      IF zqFrame.DerivedQualAttribute DOES NOT EXIST
         CREATE ENTITY zqFrame.DerivedQualAttribute  
      END
      zqFrame.DerivedQualAttribute.EntityName    = "QueryWork"
      zqFrame.DerivedQualAttribute.AttributeName = wQueryWk.DerivedAttribute.AttributeName
   END

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_Query
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_Query( VIEW ViewToWindow )

   VIEW zqFrame      REGISTERED AS zqFrame
   VIEW zqSQuery     REGISTERED AS zqSQuery
   VIEW zqSQueryTest BASED ON LOD  zqSQuery
   VIEW zqFrame2     BASED ON LOD  zqFrame
   VIEW KZXMLPGO
   VIEW vLOD
   STRING ( 300 ) szMsg
   STRING ( 100 ) szLangConv
   STRING ( 100 ) szLangConv1
   STRING ( 20 )  szDateValue
   SHORT nRC

   // Make sure new name is entered and that it is unique.
   IF zqSQuery.StoredQuery.Name = ""
      MessageSend( ViewToWindow, "QueryReq", "Save Query",
                   "Query is required.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   
   // We are going to put the boolean expression into a field that is saved to the database
   // so that we can see this from the contact list view.
   InitializeBooleanValues( ViewToWindow )
   zqSQuery.StoredQuery.BooleanExpression = zqFrame.zqFrame.dDisplayBooleanLong 
   
   // If we didn't come from QueryReportUpdate, make sure the Stored Query Name is also unique.
   GET VIEW KZXMLPGO NAMED "KZXMLPGO"
   IF KZXMLPGO.PagePath.LastPageName != "wQueryRQueryReportUpdate"
      ACTIVATE zqSQueryTest
         WHERE zqSQueryTest.StoredQuery.Name = zqSQuery.StoredQuery.Name
           AND zqSQueryTest.StoredQuery.Type = "S"
      IF RESULT >= 0
         IF zqSQueryTest.StoredQuery.ID != zqSQuery.StoredQuery.ID
            MessageSend( ViewToWindow, "QueryExists", "Save Query","Query already exists.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            DropObjectInstance( zqSQueryTest )
            RETURN 2
         END
         DropObjectInstance( zqSQueryTest )
      END
   END
   
   // Make sure each Parameter to be displayed has a Title value.
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.ListDisplayFlag = "Y" AND zqFrame.GeneralParameter.Title = ""
         MessageSend( ViewToWindow, "TitleReq", "Save Query",
                      "Title is required.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         DropObjectInstance( zqSQueryTest )
         RETURN 2
      END
   END
   
   // Check any date values specified to make sure they are valid dates.
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.SearchType != "" AND zqFrame.GeneralParameter.Value != ""
      IF zqFrame.GeneralParameter.DataType = "T"
         szDateValue = zqFrame.GeneralParameter.Value 
         nRC = ValidateDateString( szDateValue, "YYYY-MM-DD" )
         IF nRC != 0
            GetTextConv( szLangConv1, ViewToWindow, "Value", "" )
            GetMessageConv( szLangConv, ViewToWindow, "is not in valid date format, which is 'YYYY-MM-DD'.", "" )
            szMsg = szLangConv1 + ", '" + szDateValue + "', " + szLangConv 
            MessageSend( ViewToWindow, "", "Save Query",
                         szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN 2
         END
      END
   END
   
   // We're going to force the Scoping Entity to be set for all qualifications.
   FOR EACH zqFrame.GeneralParameter
      IF zqFrame.GeneralParameter.SearchType != "" 
         // If no Scoping entity is specified, position on the corresponding ParentEntity in the hierarchical structure and follow it up
         // and follow it up the path to the first 0-to-m parent, or the root.
         IF zqFrame.GeneralParameter.ScopingEntityName = ""
         
            ResetViewFromSubobjectTop( zqFrame )
            CreateViewFromView( zqFrame2, zqFrame )
            NAME VIEW zqFrame2 "zqFrame2"
            LocateEntityRecurs( zqFrame2, zqFrame.GeneralParameter.EntityName )
            
            // Set max cardinality from either the LOD or the ForceFormatMaxCardinalityOne flag,
            IF zqFrame.GeneralParameter.ForceFormatMaxCardinalityOne = "Y"
               zqFrame2.ParentEntity.MaxCardinality = 1
            ELSE
               zqFrame2.ParentEntity.MaxCardinality = zqFrame2.ParentEntity.LOD_MaxCardinality
            END
            
            // Now go up the tree until we get to the top or until we find a parent with max cardinality > 1.
            IF zqFrame2.ParentEntity.MaxCardinality = 1
               nRC = ResetViewFromSubobject( zqFrame2 )
               LOOP WHILE nRC = 0 AND zqFrame2.ParentEntity.MaxCardinality = 1 AND zqFrame2.ParentEntity.EntityName != zqFrame.zqFrame.QueryObjectRootEntityName 
                  nRC = ResetViewFromSubobject( zqFrame2 )
               END
            END
            IF zqFrame2.ParentEntity.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName
               zqFrame.GeneralParameter.RootQualificationFlag = "Y"
            ELSE
               zqFrame.GeneralParameter.RootQualificationFlag = ""
               IF zqFrame2.ParentEntity.EntityName != zqFrame.GeneralParameter.EntityName
                  zqFrame.GeneralParameter.ScopingEntityName = zqFrame2.ParentEntity.EntityName
               END
            END
            DropView( zqFrame2 )
         ELSE
            IF zqFrame.GeneralParameter.ScopingEntityName = zqFrame.zqFrame.QueryObjectRootEntityName
               zqFrame.GeneralParameter.RootQualificationFlag = "Y"
            ELSE
               zqFrame.GeneralParameter.RootQualificationFlag = ""
            END
         END
      ELSE
         zqFrame.GeneralParameter.RootQualificationFlag = ""
      END
   END

   // Call reusable operation to save the Query.
   nRC = SaveQueryReus( ViewToWindow, zqSQuery, zqFrame )
   IF nRC != 0
      RETURN 2
   END
   
   // If we came from QueryReportUpdate, delete the saved zqFrame object so that we will use the new one and
   // build out the SelectionCriteria for the changed GeneralParm entries.
   // If we didn't come from QueryReportUpdate (make sure the Stored Query Name is also unique.
   GET VIEW KZXMLPGO NAMED "KZXMLPGO"
   IF KZXMLPGO.PagePath.LastPageName = "wQueryRQueryReportUpdate"
      GET VIEW zqFrame2 NAMED "zqFrameSave"
      DropObjectInstance( zqFrame2 )
      
      FOR EACH zqFrame.SelectionCriteria 
         DELETE ENTITY zqFrame.SelectionCriteria NONE 
      END
      FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.SearchType != ""
         // Don't copy search criteria which are just to eliminate entities for performance sake.
         IF zqFrame.GeneralParameter.AttributeName != "ID" AND zqFrame.GeneralParameter.Value != "0"
            CREATE ENTITY zqFrame.SelectionCriteria 
            SetMatchingAttributesByName( zqFrame, "SelectionCriteria",
                                         zqFrame, "GeneralParameter", zSET_ALL )
            // ExternalValue may not be set, so we want ExternalValue to be just Value.
            IF zqFrame.SelectionCriteria.ExternalValue = ""
               zqFrame.SelectionCriteria.ExternalValue = zqFrame.SelectionCriteria.Value 
            END
            zqFrame.SelectionCriteria.BooleanCriteriaName     = zqFrame.GeneralParameter.wBooleanConditionName 
            zqFrame.SelectionCriteria.SubsectionQualification = zqFrame.GeneralParameter.dSubSelectQualification 
         END
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_RETURN_Query
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_RETURN_Query( VIEW ViewToWindow )

   INTEGER nRC

   // Execute SAVE_Query, followed by close.
   nRC = SAVE_Query( ViewToWindow )
   IF nRC = 2
      RETURN 2
   END
   CLOSE_QueryUpdate( ViewToWindow )

END

/*************************************************************************************************
**
**    OPERATION: SaveQueryReus
**
**
*************************************************************************************************/
LOCAL OPERATION
SaveQueryReus( VIEW ViewToWindow,
               VIEW zqSQuery BASED ON LOD zqSQuery,
               VIEW zqFrame  BASED ON LOD zqFrame )

   VIEW zqSQueryLST REGISTERED AS zqSQueryLST
   VIEW wXferO      REGISTERED AS wXferO
   VIEW vLOD
   STRING ( 500 ) szOriginalText
   SHORT nRC
   
   // Process Boolean, if necessary.
   IF zqFrame.BooleanExpression EXISTS
      IF zqFrame.BooleanExpression.TextValue = ""
         FOR EACH zqFrame.Component
            DELETE ENTITY zqFrame.Component NONE
         END
         FOR EACH zqFrame.Condition
            DELETE ENTITY zqFrame.Condition NONE
         END
      ELSE
         BuildConditionValues( zqFrame )
         nRC = ParseBooleanExpressionDialog( ViewToWindow )
         IF nRC != 0
            RETURN nRC
         END
      END
   END

   // If the Query is not contracted, contract it now.
   IF zqFrame.zqFrame.ContractedFlag != "Y"
      FOR EACH zqFrame.GeneralParameter
         IF zqFrame.GeneralParameter.SearchType      = "" AND
            zqFrame.GeneralParameter.ListDisplayFlag != "Y" AND
            zqFrame.GeneralParameter.ForceFormatMaxCardinalityOne != "Y" AND
            zqFrame.GeneralParameter.ForceSubobjectActivateFlag != "Y"

            DELETE ENTITY zqFrame.GeneralParameter NONE
         END
      END
      zqFrame.zqFrame.ContractedFlag = "Y"
   END 

   // Rebuild the ParentEntity subobject.
   GET VIEW vLOD NAMED "QueryView"
   FormatDisplay( zqFrame, vLOD )
   
   // Make sure we handle if a RootEntity is changed in the LOD.
   zqFrame.zqFrame.QueryObjectRootEntityName = zqFrame.ParentEntity.EntityName 

   // Save the query instance as a blob in zqSQuery and set the type.
   SetBlobFromOI( zqSQuery, "StoredQuery", "QueryBlob",
                  zqFrame, zINCREMENTAL )
   zqSQuery.StoredQuery.ObjectName = zqFrame.zqFrame.QueryObjectName
   IF zqSQuery.StoredQuery.Type = ""
      IF wXferO.QueryValues.QueryType = "S"
         zqSQuery.StoredQuery.Type = "S"
      ELSE
         zqSQuery.StoredQuery.Type = "G"
      END
   END

   // Commit the stored query.
   COMMIT zqSQuery
   
   // If Reports are used against this Query, ask the Operator if he wants to resync the Reports.
   /*IF zqSQuery.UsingReport EXISTS
      nRC = MessagePrompt( ViewToWindow, "", "Save Query",
                           "Reports exist that use this Query. Do you want to resync the Query to those Reports?",
                           0, zBUTTONS_YESNO, zRESPONSE_NO, 0 )
      IF nRC = zRESPONSE_YES
         FOR EACH zqSQuery.UsingReport 
            ResyncQueryToReport( zqSQuery )
         END
      END
   END*/
   
   // Check to see if each Title value is in language conversion object and add it as necessary.
   // We will add each GeneralParameter Title and the Report Title.
   FOR EACH zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.ListDisplayFlag = "Y"
      szOriginalText = zqFrame.GeneralParameter.Title 
      IF szOriginalText != ""
         CheckAddLanguageText( zqFrame, szOriginalText )
      END
   END
   IF zqFrame.zqFrame.ReportTitle != ""
      szOriginalText = zqFrame.zqFrame.ReportTitle 
      CheckAddLanguageText( zqFrame, szOriginalText )
   END

   // Make sure the new information is in the list, if the list exists.
   GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0
      SET CURSOR FIRST zqSQueryLST.StoredQuery
            WHERE zqSQueryLST.StoredQuery.ID = zqSQuery.StoredQuery.ID
      IF RESULT >= zCURSOR_SET
         // An entry was found, so replace it with new information.
         EXCLUDE zqSQueryLST.StoredQuery NONE
         INCLUDE zqSQueryLST.StoredQuery FROM zqSQuery.StoredQuery
      ELSE
         // An entry was not found, so add it at end.
         SET CURSOR LAST zqSQueryLST.StoredQuery
         INCLUDE zqSQueryLST.StoredQuery FROM zqSQuery.StoredQuery
      END
      
      // Make sure that the list entry is selected.
      SetSelectStateOfEntity( zqSQueryLST, "StoredQuery", 1 )
   END
   
   // Make sure Boolean Condition entries deleted earlier for save are rebuilt.
   BuildConditionValues( zqFrame )

END

/*************************************************************************************************
**
**    OPERATION: ParseBooleanExpressionDialog
**
**
*************************************************************************************************/
DIALOG OPERATION
ParseBooleanExpressionDialog( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   INTEGER LeftParenCount
   INTEGER RightParenCount
   STRING ( 10 )  ComponentValue
   STRING ( 100 ) Msg
   SHORT          nRC

   // Remove any prior parse results.
   FOR EACH zqFrame.Component
      DELETE ENTITY zqFrame.Component NONE
   END

   // Parse the expression and create the Component entities.
   //nRC = ParseBooleanExpression( zqFrame )
   nRC = ParseBooleanVML( zqFrame )
   IF nRC < 0
      RETURN nRC
   END

   // Validate that parens are balanced and operators and variables are valid.
   FOR EACH zqFrame.Component
      ComponentValue = zqFrame.Component.Value
      IF ComponentValue = "("
         LeftParenCount = LeftParenCount + 1
      ELSE
         IF ComponentValue = ")"
            RightParenCount = RightParenCount + 1
         ELSE
            IF ComponentValue != "AND" AND ComponentValue != "OR"
               SET CURSOR FIRST zqFrame.Condition
                          WHERE zqFrame.Condition.BooleanConditionName = ComponentValue
               IF RESULT < zCURSOR_SET
                  Msg = "Parameter, '" + ComponentValue + "' is not a valid operator or Component Name."
                  MessageSend( ViewToWindow, "", "Parse Boolean Expression",
                               Msg,
                               zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
                  RETURN 2
               END
            END
         END
      END
   END
   IF RightParenCount != LeftParenCount
      MessageSend( ViewToWindow, "", "Parse Boolean Expression",
                   "The parens are not balanced.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

END

/*************************************************************************************************
**    
**    OPERATION: ParameterComboSelect
**    
*************************************************************************************************/
DIALOG OPERATION
ParameterComboSelect( VIEW ViewToWindow )

   VIEW zqFrameOrig REGISTERED AS zqFrame
   VIEW zqFrame     BASED ON LOD  zqFrame
   INTEGER Count
   SHORT   nRC
   STRING ( 90 ) szValue

   // Create or delete GeneralSubParameter entities depending on whether the GeneralParameter.SearchType
   // is subselect.
   CreateViewFromView( zqFrame, zqFrameOrig )
   IF zqFrame.GeneralParameter.SearchType = "subselect"
      //zqFrame.GeneralParameter.SecondLevelOperator = "OR"
      IF zqFrame.GeneralSubParameter DOES NOT EXIST
         Count = 20
         LOOP WHILE Count > 0
            CREATE ENTITY zqFrame.GeneralSubParameter
            Count = Count - 1
         END
         SET CURSOR FIRST zqFrame.GeneralSubParameter
      END
   ELSE
      FOR EACH zqFrame.GeneralSubParameter
         DELETE ENTITY zqFrame.GeneralSubParameter NONE
      END
   END
   
   // For all Root General Parameters, make sure the Scoping Entity is either null or the Root Entity.
   // Also, make sure it's not selected if there is no SearchType specified
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.SearchType = ""
         zqFrame.GeneralParameter.ScopingEntityName = ""
         //zqFrame.GeneralParameter.Value             = ""    // Delete 5/29/2020 by DonC so that work values could be specified without an Operator.
         IF zqFrame.ScopingQueryEntity EXISTS
            EXCLUDE zqFrame.ScopingQueryEntity  
         END
      ELSE
         IF zqFrame.GeneralParameter.EntityName = zqFrame.zqFrame.QueryObjectRootEntityName 
            IF zqFrame.GeneralParameter.ScopingEntityName != "" AND 
               zqFrame.GeneralParameter.ScopingEntityName != zqFrame.zqFrame.QueryObjectRootEntityName 
               
               zqFrame.GeneralParameter.ScopingEntityName = "" 
            END
         END
      END
   END

   // If a Qualification entry has been selected, make sure it is valid for the
   // GeneralParameter entry for which it was entered.
   nRC = ValidateScopingEntity( zqFrame )
   
   RETURN nRC

END

/*************************************************************************************************
**    
**    OPERATION: InitializeQueryUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
InitializeQueryUpdate( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW vLOD
   STRING ( 32 )  szEntityName
   STRING ( 32 )  szAttributeName
   STRING ( 50 )  szEntityNamePrefix
   INTEGER        IndentLevel
   
   // Since we have removed the AND/OR selection for root entity qualification, initialize
   // the FirstLevelOperator to AND.
   zqFrame.zqFrame.FirstLevelOperator = "AND"
   
   // Make sure that Condition entities are built.
   BuildConditionValues( zqFrame )

   // Build the recursive structure used by "Scoping Entity" processing.
   GET VIEW vLOD NAMED "QueryView"
   FormatDisplay( zqFrame, vLOD )
   
   // Build the Display Tree Values fresh.
   InitQueryUpdate( zqFrame, vLOD )  
   
   // Build the Graphics selection entries.
   InitializeQueryGraphMapping( zqFrame )
   
   // Make sure that ScopingSourceQueryEntity entries are built afresh.
   FOR zqFrame.ScopingSourceQueryEntity
      DELETE ENTITY zqFrame.ScopingSourceQueryEntity NONE 
   END
   FOR EACH vLOD.LOD_Entity
      CREATE ENTITY zqFrame.ScopingSourceQueryEntity 
      zqFrame.ScopingSourceQueryEntity.EntityName = vLOD.LOD_Entity.Name
   END
   
   // Also include appropriate ScopingQueryEntity entities based on GeneralParameter.ScopingEntityName.
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.ScopingEntityName != ""
         IF zqFrame.ScopingQueryEntity DOES NOT EXIST
            SET CURSOR FIRST zqFrame.ScopingSourceQueryEntity 
                       WHERE zqFrame.ScopingSourceQueryEntity.EntityName = zqFrame.GeneralParameter.ScopingEntityName 
            INCLUDE zqFrame.ScopingQueryEntity FROM zqFrame.ScopingSourceQueryEntity 
         END
      END
   END
   SET CURSOR FIRST zqFrame.GeneralParameter 
   SET CURSOR FIRST zqFrame.ScopingSourceQueryEntity

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_UpdateGeneralParameter
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_UpdateGeneralParameter( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW wQueryWk REGISTERED AS wQueryWk
   VIEW QueryView
   VIEW KZXMLPGO
   STRING ( 20 ) szDateValueIn
   STRING ( 20 ) szDateValueOut
   INTEGER Count
   INTEGER nRC
   
   // If the GeneralParameter.SearchType is Sub Select, then expand the GeneralSubParameter entries to 20.
   IF zqFrame.GeneralParameter.SearchType = "subselect"
      Count = 0
      // Make sure there are at least 20 subparms.
      FOR EACH zqFrame.GeneralSubParameter 
         Count = Count + 1
      END
      LOOP WHILE Count < 20
         CREATE ENTITY zqFrame.GeneralSubParameter 
         Count = Count + 1 
      END
      SET CURSOR FIRST zqFrame.GeneralSubParameter
   END
   
   // Position on correct wQueryWk.DerivedAttribute entry.
   IF zqFrame.DerivedQualAttribute EXISTS
      SET CURSOR FIRST wQueryWk.DerivedAttribute WHERE wQueryWk.DerivedAttribute.AttributeName = zqFrame.DerivedQualAttribute.AttributeName  
   ELSE
      SET CURSOR FIRST wQueryWk.DerivedAttribute  
   END
   
   // Go to appropriate General Parameter update page based on type of parameter.
   // Also set up subparameter values as necessary
      
   IF zqFrame.GeneralParameter.DataType = "T"
      // The Parameter is a date, so copy Query Values to work values and go to date update page.
      szDateValueIn = zqFrame.GeneralParameter.Value 
      IF szDateValueIn = "" 
         zqFrame.GeneralParameter.wValueUpdateDate = ""
      ELSE
         nRC = ValidateDateString( szDateValueIn, "YYYY-MM-DD" )
         IF nRC = 0
            szDateValueOut = szDateValueIn[1:4] + szDateValueIn[6:2] + szDateValueIn[9:2]
            zqFrame.GeneralParameter.wValueUpdateDate = szDateValueOut
         ELSE
            MessageSend( ViewToWindow, "", "Update Query",
                         "The date value specified is not a valid date.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN 2
         END
      END
      FOR EACH zqFrame.GeneralSubParameter 
         szDateValueIn = zqFrame.GeneralSubParameter.Value 
         IF szDateValueIn = "" 
            zqFrame.GeneralSubParameter.wValueUpdateDate = ""
         ELSE
            nRC = ValidateDateString( szDateValueIn, "YYYY-MM-DD" )
            IF nRC = 0 
               szDateValueOut = szDateValueIn[1:4] + szDateValueIn[6:2] + szDateValueIn[9:2]
               zqFrame.GeneralSubParameter.wValueUpdateDate = szDateValueOut
            ELSE
               zqFrame.GeneralSubParameter.wValueUpdateDate = ""
            END
         END
      END
      
      // Set up transfer to next page.
      GET VIEW KZXMLPGO NAMED "KZXMLPGO"
      CREATE ENTITY KZXMLPGO.NextDialogWindow
      KZXMLPGO.NextDialogWindow.DialogName = "wQuery" 
      KZXMLPGO.NextDialogWindow.WindowName = "ParameterUpdateCalendar"
   ELSE
      // If the parameter is not a date, we need to check the Domain to see if it's a table.
      GET VIEW QueryView NAMED "QueryView"
      SET CURSOR FIRST QueryView.LOD     // Make sure the root is visible.
      SET CURSOR FIRST QueryView.LOD_Entity WHERE QueryView.LOD_Entity.Name = zqFrame.GeneralParameter.EntityName 
      SET CURSOR FIRST QueryView.ER_Attribute WITHIN QueryView.LOD_Entity WHERE QueryView.ER_Attribute.Name = zqFrame.GeneralParameter.AttributeName 
      
      // Set up transfer to next page.
      GET VIEW KZXMLPGO NAMED "KZXMLPGO"
      CREATE ENTITY KZXMLPGO.NextDialogWindow
      IF QueryView.Domain.DomainType = "T"
         // The parameter is a table, so set up combo box table and  go to table update page.
         // Also, if this is a subselect, set up work values in sub parameter entries.
         zqFrame.GeneralParameter.wValueUpdateTable = zqFrame.GeneralParameter.Value 
         FOR EACH zqFrame.GeneralSubParameter 
            zqFrame.GeneralSubParameter.wValueUpdateTable = zqFrame.GeneralSubParameter.Value 
         END
         BuildValueComboBoxTable( ViewToWindow )
         KZXMLPGO.NextDialogWindow.DialogName = "wQuery"
         KZXMLPGO.NextDialogWindow.WindowName = "ParameterUpdateComboBox" 
      ELSE
         // The parameter is not a date nor a table, so go to regular update page.
         KZXMLPGO.NextDialogWindow.DialogName = "wQuery" 
         KZXMLPGO.NextDialogWindow.WindowName = "ParameterUpdate"
      END
   END
   
   // Set up return back to the current page.
   CREATE ENTITY KZXMLPGO.PagePath
   KZXMLPGO.PagePath.LastPageName = "wQueryQueryUpdate" 

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_ParameterUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_ParameterUpdate( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   STRING ( 50 ) szDataValue
   
   // If a Derived Attribute is entered, don't allow a value to be entered.
   IF zqFrame.DerivedQualAttribute EXISTS AND zqFrame.GeneralParameter.Value != ""
      MessageSend( ViewToWindow, "", "Update Query",
                   "If a 'Derived Entry' is specified, a 'Value' cannot be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   IF zqFrame.DerivedQualAttribute EXISTS 
      // For Derived Qual Attribute, set ExternalValue to derived name.
      zqFrame.GeneralParameter.ExternalValue  = zqFrame.DerivedQualAttribute.AttributeName 
      zqFrame.SelectionCriteria.ExternalValue = zqFrame.DerivedQualAttribute.AttributeName 
   ELSE
      // Make sure any null GeneralSubParameter entries are removed.
      FOR EACH zqFrame.GeneralSubParameter 
         IF zqFrame.GeneralSubParameter.SearchType = ""
            DELETE ENTITY zqFrame.GeneralSubParameter NONE 
         END
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_ParameterUpdateCalendar
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_ParameterUpdateCalendar( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   STRING ( 50 ) szDateValue
   
   // If a Derived Attribute is entered, don't allow a value to be entered.
   IF zqFrame.DerivedQualAttribute EXISTS AND zqFrame.GeneralParameter.Value != ""
      MessageSend( ViewToWindow, "", "Update Query",
                   "If a 'Derived Entry' is specified, a 'Value' cannot be specified.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   IF zqFrame.DerivedQualAttribute EXISTS 
      // For Derived Qual Attribute, set ExternalValue to derived name.
      zqFrame.GeneralParameter.ExternalValue  = zqFrame.DerivedQualAttribute.AttributeName 
      zqFrame.SelectionCriteria.ExternalValue = zqFrame.DerivedQualAttribute.AttributeName 
   ELSE
      // Copy Calendar work values to the regular Query values, both for GeneralParameter and for GeneralSubParameter.
      szDateValue = zqFrame.GeneralParameter.wValueUpdateDate 
      zqFrame.GeneralParameter.ExternalValue = szDateValue
      IF szDateValue != ""
         zqFrame.GeneralParameter.Value = szDateValue[1:4] + "-" + szDateValue[5:2] + "-" + szDateValue[7:2]
         zqFrame.GeneralParameter.ExternalValue = zqFrame.GeneralParameter.Value
         
         // If there is a SelectionCriteria entry for the GeneralParameter just updated, set the values there.
         IF zqFrame.SelectionCriteria EXISTS
            IF zqFrame.SelectionCriteria.BooleanCriteriaName = zqFrame.GeneralParameter.wBooleanConditionName 
               zqFrame.SelectionCriteria.Value         = zqFrame.GeneralParameter.Value 
               zqFrame.SelectionCriteria.ExternalValue = zqFrame.GeneralParameter.ExternalValue 
            END
         END
      END
      // Make sure any null GeneralSubParameter entries are removed.
      FOR EACH zqFrame.GeneralSubParameter 
         IF zqFrame.GeneralSubParameter.SearchType = ""
            DELETE ENTITY zqFrame.GeneralSubParameter NONE 
         ELSE
            szDateValue = zqFrame.GeneralSubParameter.wValueUpdateDate 
            zqFrame.GeneralSubParameter.Value = szDateValue[1:4] + "-" + szDateValue[5:2] + "-" + szDateValue[7:2]
         END
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_ParameterUpdateComboBox
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_ParameterUpdateComboBox( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   VIEW DOMAINT BASED ON LOD  DomainT
   STRING ( 200 ) szValue
   
   // Copy Combo box work values to the regular Query values, both for GeneralParameter and for GeneralSubParameter.
   
   GET VIEW DOMAINT NAMED "_DM_QueryComboUpd_QueryComboUpd"
   szValue = zqFrame.GeneralParameter.wValueUpdateTable
   zqFrame.GeneralParameter.Value = szValue
   
   // Get the External Value for display purposes.
   IF szValue != "" 
      SET CURSOR FIRST DOMAINT.DomainValue WHERE DOMAINT.DomainValue.InternalStringValue = szValue
      zqFrame.GeneralParameter.ExternalValue = DOMAINT.DomainValue.ExternalDescription 
   ELSE
      zqFrame.GeneralParameter.ExternalValue = ""
   END
   
   // If there is a SelectionCriteria entry for the GeneralParameter just updated, set the values there.
   IF zqFrame.SelectionCriteria EXISTS
      IF zqFrame.SelectionCriteria.BooleanCriteriaName = zqFrame.GeneralParameter.wBooleanConditionName 
         zqFrame.SelectionCriteria.Value         = zqFrame.GeneralParameter.Value 
         zqFrame.SelectionCriteria.ExternalValue = zqFrame.GeneralParameter.ExternalValue 
      END
   END
   
   
   FOR EACH zqFrame.GeneralSubParameter 
      IF zqFrame.GeneralSubParameter.SearchType = ""
         DELETE ENTITY zqFrame.GeneralSubParameter NONE 
      ELSE
         szValue = zqFrame.GeneralSubParameter.wValueUpdateTable
         IF szValue != "" 
            // First check if the value is internal.
            SET CURSOR FIRST DOMAINT.DomainValue WHERE DOMAINT.DomainValue.InternalStringValue = szValue
            IF RESULT < zCURSOR_SET
               // This is the combo box error noted above.
               SET CURSOR FIRST DOMAINT.DomainValue WHERE DOMAINT.DomainValue.ExternalDescription = szValue
               szValue = DOMAINT.DomainValue.InternalStringValue  
            END 
         END
         zqFrame.GeneralSubParameter.Value = szValue
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: InitializeBooleanValues
**    
*************************************************************************************************/
DIALOG OPERATION
InitializeBooleanValues( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame

   // Make sure the Boolean Expression entity exists and that the Condition Entities are created.
   IF zqFrame.BooleanExpression DOES NOT EXIST
      CREATE ENTITY zqFrame.BooleanExpression
   END
   BuildConditionValues( zqFrame )

END

/*************************************************************************************************
**    
**    OPERATION: POSITION_OnDisplayAttribute
**    
*************************************************************************************************/
DIALOG OPERATION
POSITION_OnDisplayAttribute( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqFrame2 BASED ON LOD  zqFrame
   
   // Set the Selected flag for the entity selected (clearing all other flags first).
   CreateViewFromView( zqFrame2, zqFrame )
   FOR EACH zqFrame2.DisplayTreeEntity 
      zqFrame2.DisplayTreeEntity.wSelectedFlag = ""
   END
   DropView( zqFrame2 )
   zqFrame.DisplayTreeEntity.wSelectedFlag = "Y"

END

/*************************************************************************************************
**    
**    OPERATION: ADD_AttributesToGeneralParms
**    
*************************************************************************************************/
DIALOG OPERATION
ADD_AttributesToGeneralParms( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   
   // Make sure the current Attribute is selected, then add the selected Attribute with their corresponding 
   // Entity to the list of General Parameters.
   // We will do this in the following steps:
   // 1. Set the Selected flag for the current Attribute.
   // 2. Expand the General Paramter entries.
   // 3. Flag these entries as wSelectedToShow.
   // 4. Contract the entries.
   zqFrame.DisplayTreeAttribute.wSelectedToShow = "Y"
   zqFrame.zqFrame.ContractedFlag = ""
   EXPAND_CONTRACT_GeneralParms( ViewToWindow )
   FOR zqFrame.DisplayTreeAttribute WHERE zqFrame.DisplayTreeAttribute.wSelectedToShow = "Y"
      SET CURSOR FIRST zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.EntityName    = zqFrame.DisplayTreeEntity.EntityName 
                                                  AND zqFrame.GeneralParameter.AttributeName = zqFrame.DisplayTreeAttribute.Name 
      zqFrame.GeneralParameter.wSelectedToShow = "Y"
   END
   zqFrame.zqFrame.ContractedFlag = "Y"
   EXPAND_CONTRACT_GeneralParms( ViewToWindow )
   zqFrame.GeneralParameter.ListDisplayFlag = ""

END

/*************************************************************************************************
**
**    OPERATION: FormatCSV_File
**
**
*************************************************************************************************/
DIALOG OPERATION
FormatCSV_File( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW sHost       REGISTERED AS sHost
   VIEW mUser       REGISTERED AS mUser
   VIEW zqFrameOrig REGISTERED AS zqFrame
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW vLOD
   VIEW vResultSet
   STRING ( 400 ) szFileName

   // Format the CSV File to the file name specified in wXferO.
   
   // For FileDownLoad, the FileName will be built on UserName.
   szFileName = sHost.Host.TempDir + "QueryReport" + mUser.User.UserName + ".csv"
   wXferO.QueryValues.OutputFileName = szFileName
   TraceLineS( "### CSV File: ", szFileName )

   GET VIEW vResultSet NAMED "ResultSet"
   GET VIEW vLOD NAMED "QueryView"
   CreateViewFromView( zqFrame, zqFrameOrig )
   FormatCSV_FrmResultSet( zqFrame,
                           vLOD,
                           vResultSet,
                           wXferO.QueryValues.ResultType,
                           szFileName )
   DropView( zqFrame )

   // The FormatCSV_FrmResultSet operation messed up cursor positioning of ParentEntity for
   // zqFrame, so reset it.
   SET CURSOR FIRST zqFrameOrig.ParentEntity

END

/*************************************************************************************************
**    
**    OPERATION: COPY_GroupStartCharacters
**    
*************************************************************************************************/
DIALOG OPERATION
COPY_GroupStartCharacters( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqSQuery REGISTERED AS zqSQuery
   STRING ( 100 ) szMappingName

   // Copy the mapping name of the entity to the clip board, prefixed by the group start characters.
   POSITION_OnDisplayAttribute( ViewToWindow )
   szMappingName = "[Z:#S:" + 
                   zqFrame.DisplayTreeEntity.EntityName + "]"
   zqSQuery.StoredQuery.wCopyMappingArea = szMappingName

END

/*************************************************************************************************
**    
**    OPERATION: COPY_GroupEndCharacters
**    
*************************************************************************************************/
DIALOG OPERATION
COPY_GroupEndCharacters( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqSQuery REGISTERED AS zqSQuery
   STRING ( 100 ) szMappingName

   // Copy the group end characters to the clip board.
   szMappingName = "[Z:#E]"
   zqSQuery.StoredQuery.wCopyMappingArea = szMappingName

END

/*************************************************************************************************
**    
**    OPERATION: COPY_AttributeMappingCharacters
**    
*************************************************************************************************/
DIALOG OPERATION
COPY_AttributeMappingCharacters( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqSQuery REGISTERED AS zqSQuery
   STRING ( 100 ) szMappingName
   
   // Copy the mapping name of the attribute to the clip board.
   szMappingName = "[Z:" +
                   zqFrame.DisplayTreeEntity.EntityName + "." +
                   zqFrame.DisplayTreeAttribute.Name + "]"
   zqSQuery.StoredQuery.wCopyMappingArea = szMappingName

END

/*************************************************************************************************
**    
**    OPERATION: TEST_MergeTemplate
**    
*************************************************************************************************/
DIALOG OPERATION
TEST_MergeTemplate( VIEW ViewToWindow )

   /*VIEW wXferO    REGISTERED AS wXferO
   VIEW TestMerge BASED ON LOD  TestMerge
   STRING ( 50000000 ) szTemplateData
   STRING ( 50000000 ) szOutputData
   STRING ( 1000 )   szInputFileName
   STRING ( 1000 )   szOutputFileName
   INTEGER nRC
   INTEGER FileHandleInput
   INTEGER FileHandleOutput
   INTEGER Length
   INTEGER InputPtr
   INTEGER OutputPtr
   INTEGER CopyStart
   INTEGER CopyLength
   INTEGER TraceCount
   INTEGER FindStringPtr
   
   // Set up Test Merge source object.
   ACTIVATE TestMerge EMPTY 
   NAME VIEW TestMerge "TestMerge" 
   CREATE ENTITY TestMerge.FinAidProfile 
   TestMerge.FinAidProfile.dTotal       = 0
   TestMerge.FinAidProfile.dTotalFall   = 0
   TestMerge.FinAidProfile.dTotalSpring = 0
   TestMerge.FinAidProfile.dTotalSummer = 0
   CREATE ENTITY TestMerge.Person 
   TestMerge.Person.dToday       = "20190401"
   TestMerge.Person.CampusID     = "2346233"
   TestMerge.Person.dFullName    = "William B. Butler"
   CREATE ENTITY TestMerge.Address 
   TestMerge.Address.dFullAddress = "34 Next Street" + NEW_LINE + "Quincy, MA 02171"
   CREATE ENTITY TestMerge.CollegeYear 
   TestMerge.CollegeYear.Year = 2018
   CREATE ENTITY TestMerge.Footnote 
   TestMerge.Footnote.SourceFootNote = "This is a test footnote."
   CREATE ENTITY TestMerge.FinAidAwarded 
   TestMerge.FinAidAwarded.AwardValue3Term = "" 
   
   CREATE ENTITY TestMerge.AwardLetterFederal 
   TestMerge.AwardLetterFederal.CostOfAttendanceTotal = 29450
   CREATE ENTITY TestMerge.AwardLetterFederalCOAItem 
   TestMerge.AwardLetterFederalCOAItem.Description  = "Tuition"
   TestMerge.AwardLetterFederalCOAItem.FallAmount   = 10242
   TestMerge.AwardLetterFederalCOAItem.SpringAmount = 10242
   TestMerge.AwardLetterFederalCOAItem.Amount       = 20484
   CREATE ENTITY TestMerge.AwardLetterFederalCOAItem 
   TestMerge.AwardLetterFederalCOAItem.Description  = "SA Fee"
   TestMerge.AwardLetterFederalCOAItem.FallAmount   = 333
   TestMerge.AwardLetterFederalCOAItem.SpringAmount = 123
   TestMerge.AwardLetterFederalCOAItem.Amount       = 456
   CREATE ENTITY TestMerge.AwardLetterFederalCOAItem 
   TestMerge.AwardLetterFederalCOAItem.Description  = "Room & Board"
   TestMerge.AwardLetterFederalCOAItem.FallAmount   = 6200
   TestMerge.AwardLetterFederalCOAItem.SpringAmount = 6200
   TestMerge.AwardLetterFederalCOAItem.Amount       = 12400
   
   // Copy one test file to another merging sample object data.
   szInputFileName = wXferO.Root.WorkFileName 
   InsertOI_DataIntoTemplateFile( TestMerge,
                                  "c:\temp\Test Merge Output 2.rtf",
                                  szInputFileName,
                                  "",
                                  "FinAidProfile" )*/

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_AddNewGraphicsDef
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_AddNewGraphicsDef( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW QueryView
   
   // Build a GraphDefinition subobject from the GraphTypeDefinition subobject.
   CreateTemporalEntity( zqFrame, "GraphDefinition", zPOS_AFTER )
   zqFrame.GraphDefinition.Type = zqFrame.GraphTypeDefinition.Type 
   FOR EACH zqFrame.GraphTypeMappingParameter 
      CREATE ENTITY zqFrame.GraphMappingParameter 
      zqFrame.GraphMappingParameter.MappingType = zqFrame.GraphTypeMappingParameter.MappingType 
      zqFrame.GraphMappingParameter.Name        = zqFrame.GraphTypeMappingParameter.Name  
   END 
   
   // Make sure the General Parms are expanded..
   GET VIEW QueryView NAMED "QueryView"
   zqFrame.zqFrame.ContractedFlag = ""
   EXPAND_CONTRACT_GeneralParms( ViewToWindow )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_UpdateGraphDefinition
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_UpdateGraphDefinition( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   
   // Create the termporal subobject for update and make sure the select list is expanded.
   CreateTemporalSubobjectVersion( zqFrame, "GraphDefinition" )
   zqFrame.zqFrame.ContractedFlag = ""
   EXPAND_CONTRACT_GeneralParms( ViewToWindow )

END

/*************************************************************************************************
**    
**    OPERATION: DELETE_GraphicsDefinition
**    
*************************************************************************************************/
DIALOG OPERATION
DELETE_GraphicsDefinition( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   
   DELETE ENTITY zqFrame.GraphDefinition  

END

/*************************************************************************************************
**    
**    OPERATION: ACCEPT_GraphDefUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
ACCEPT_GraphDefUpdate( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   STRING ( 50 ) szLoopingEntityName
   
   // Make sure that the necessary variable are specified and then accept the subobject.
   IF zqFrame.GraphDefinition.Title = ""
      MessageSend( ViewToWindow, "TitleReq", "",
                   "Title is required.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SET CURSOR FIRST zqFrame.GraphMappingParameter
      RETURN 2
   END
   FOR EACH zqFrame.GraphMappingParameter 
      IF zqFrame.GraphMappingParameter.EntityName = ""
         MessageSend( ViewToWindow, "", "",
                      "A mapping value must be specified for each parameter.",
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         SET CURSOR FIRST zqFrame.GraphMappingParameter
         RETURN 2
      END
   END
   
   // If the Graph has both a "Looping Entity" and a "Level-2 Looping Entity" with the same name, that's an error.
   SET CURSOR FIRST zqFrame.GraphMappingParameter WHERE zqFrame.GraphMappingParameter.Name = "Looping Entity"
   IF RESULT >= zCURSOR_SET
      szLoopingEntityName = zqFrame.GraphMappingParameter.EntityName 
      SET CURSOR FIRST zqFrame.GraphMappingParameter WHERE zqFrame.GraphMappingParameter.Name = "Level-2 Looping Entity"
      IF RESULT >= zCURSOR_SET
         IF zqFrame.GraphMappingParameter.EntityName = szLoopingEntityName
            MessageSend( ViewToWindow, "", "",
                         "The 'Looping Entity' and 'Level-2 Looping Entity' cannot be the same value.",
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            SET CURSOR FIRST zqFrame.GraphMappingParameter
            RETURN 2
         END
      END
   END 
   
   AcceptSubobject( zqFrame, "GraphDefinition" )
   CLEAR_GraphParameters( ViewToWindow )

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_MappingForParameter
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_MappingForParameter( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   
   // Make sure a GraphMappingParameter is selected.
   SET CURSOR FIRST zqFrame.GraphMappingParameter WHERE zqFrame.GraphMappingParameter.wSelected = "Y"
   IF RESULT < zCURSOR_SET
      MessageSend( ViewToWindow, "ParameterReq", "",
                   "Parameter is required.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SET CURSOR FIRST zqFrame.GraphMappingParameter
      RETURN 2
   END
   
   // Copy the correct mapping parameters from GeneralParameter to GraphMappingParameter, depending on Type.
   zqFrame.GraphMappingParameter.ObjectViewName = zqFrame.zqFrame.QueryObjectName 
   IF zqFrame.GraphMappingParameter.MappingType = "E"
      // Mapping is Entity Name only.
      zqFrame.GraphMappingParameter.EntityName = zqFrame.GeneralParameter.EntityName 
   ELSE
      // Mapping is Entity Name and Attribute Name.
      zqFrame.GraphMappingParameter.EntityName    = zqFrame.GeneralParameter.EntityName 
      zqFrame.GraphMappingParameter.AttributeName = zqFrame.GeneralParameter.AttributeName 
   END
   
   // Clear all select flags.
   FOR EACH zqFrame.GraphMappingParameter 
      zqFrame.GraphMappingParameter.wSelected = ""
   END
   SET CURSOR FIRST zqFrame.GraphMappingParameter
   SET CURSOR FIRST zqFrame.GeneralParameter

END

/*************************************************************************************************
**    
**    OPERATION: PrebuildGraphicsDisplay
**    
*************************************************************************************************/
DIALOG OPERATION
PrebuildGraphicsDisplay( VIEW ViewToWindow )

   VIEW mChart  REGISTERED AS mChart
   VIEW sAppMgr REGISTERED AS sAppMgr
   INTEGER      Count
   STRING ( 5 ) szCount
   STRING ( 100 ) szLangConv  
   
   // Set the name of each Chart of the form, "ChartX", where X is a sequential number.
   Count = 0
   /*FOR EACH mChart.Chart 
      Count = Count + 1
      szCount = Count
      mChart.Chart.Tag = "Chart" + szCount
   END*/
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Graphics","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv 

END

/*************************************************************************************************
**    
**    OPERATION: DELETE_GeneralParameter
**    
*************************************************************************************************/
DIALOG OPERATION
DELETE_GeneralParameter( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   
   // Delete the General Parameter selected and turn off the selected flag of the corresponding entry
   // in the Display Tree.
   SET CURSOR FIRST zqFrame.DisplayTreeEntity WHERE zqFrame.DisplayTreeEntity.EntityName = zqFrame.GeneralParameter.EntityName 
   SET CURSOR FIRST zqFrame.DisplayTreeAttribute WHERE zqFrame.DisplayTreeAttribute.Name = zqFrame.GeneralParameter.AttributeName 
   zqFrame.DisplayTreeAttribute.wSelectedToShow = ""
   DELETE ENTITY zqFrame.GeneralParameter

END

/*************************************************************************************************
**    
**    OPERATION: TEST_Recursive
**    
*************************************************************************************************/
DIALOG OPERATION
TEST_Recursive( VIEW ViewToWindow )

   /*VIEW zqFrameOrig REGISTERED AS zqFrame
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW vLOD
   VIEW vResultSet
   INTEGER FilePointer
   INTEGER nRC
   INTEGER nLevel
   INTEGER nLastLevel
   STRING ( 50 ) szReturnedEntityName
   STRING ( 50 ) szObjectEntityName
   STRING ( 50 ) szParentEntityName
   // Test Hierarchical Processing.
   
   CreateViewFromView( zqFrame, zqFrameOrig )
   NAME VIEW zqFrame "zqFrameHier"
   SET CURSOR FIRST zqFrame.zqFrame  
   SET CURSOR FIRST zqFrame.ParentEntity
   TraceLineS( "@@@ Before Hierarchical Cursor ", "" )
   DefineHierarchicalCursor( zqFrame, "ParentEntity" )
   szObjectEntityName = ""
   szParentEntityName = zqFrame.ParentEntity.EntityName 
   TraceLineS( "@@@ Parent Entity: ", szParentEntityName )
   nLastLevel = 0
   nRC = SetCursorNextEntityHierarchical( nLevel, szReturnedEntityName, zqFrame )
   TraceLineI( "@@@ nRC: ", nRC )
   IF nLevel > nLastLevel
      SetViewToSubobject( zqFrame, "ChildEntity" )
   END
   szObjectEntityName = zqFrame.ParentEntity.EntityName 
   TraceLineS( szReturnedEntityName, szObjectEntityName )
   LOOP WHILE nRC >= 0 AND szObjectEntityName != szParentEntityName
      //TraceLineS( "@@@ Hier Entity: ", szObjectEntityName )
      //TraceLineI( "@@@ nLevel: ", nLevel )
      IF zqFrame.QueryAttribute EXISTS
         FOR EACH zqFrame.QueryAttribute 
            szObjectEntityName = zqFrame.QueryAttribute.AttributeName 
            TraceLineS( "@@@ Query Attribute ", szObjectEntityName )
         END
      END
      IF szObjectEntityName = "CohortClassesClass"
         TraceLineS( "@@@ Stop 1", "" ) 
      END
      nLastLevel = nLevel
      nRC = SetCursorNextEntityHierarchical( nLevel, szReturnedEntityName, zqFrame )
      SetViewToSubobject( zqFrame, "ChildEntity" )
      szObjectEntityName = zqFrame.ParentEntity.EntityName 
      TraceLineS( szReturnedEntityName, szObjectEntityName )
      TraceLineI( "@@@ nLevel: ", nLevel )
   END
   DropView( zqFrame )
   
   // Test SET CURSOR at third level.
   SET CURSOR FIRST zqFrameOrig.zqFrame  
   SET CURSOR FIRST zqFrameOrig.ParentEntity
   SetViewToSubobject( zqFrameOrig, "ChildEntity" ) 
   szObjectEntityName = zqFrameOrig.ParentEntity.EntityName 
   TraceLineS( "@@@ Start 1 Entity: ", szObjectEntityName )
   SET CURSOR FIRST zqFrameOrig.ParentEntity 
   szObjectEntityName = zqFrameOrig.ParentEntity.EntityName 
   TraceLineS( "@@@ First Entity: ", szObjectEntityName )
   SET CURSOR NEXT zqFrameOrig.ParentEntity 
   szObjectEntityName = zqFrameOrig.ParentEntity.EntityName 
   TraceLineS( "@@@ Second Entity: ", szObjectEntityName )
   SET CURSOR NEXT zqFrameOrig.ParentEntity 
   szObjectEntityName = zqFrameOrig.ParentEntity.EntityName 
   TraceLineS( "@@@ Third Entity: ", szObjectEntityName )
   SetViewToSubobject( zqFrameOrig, "ChildEntity" ) 
   FOR EACH zqFrameOrig.ParentEntity 
      szObjectEntityName = zqFrameOrig.ParentEntity.EntityName 
      TraceLineS( "@@@ 3rd Level Entity: ", szObjectEntityName )
   END  */
   

   /*VIEW zqFrame BASED ON LOD zqFrame
   
   ACTIVATE zqFrame EMPTY 
   NAME VIEW zqFrame "zqFrameTest" 
   CREATE ENTITY zqFrame.zqFrame 
   CREATE ENTITY zqFrame.ParentEntity 
   zqFrame.ParentEntity.EntityName = "Student"
   SetViewToSubobject( zqFrame, "ChildEntity" ) 
   CREATE ENTITY zqFrame.ParentEntity
   zqFrame.ParentEntity.EntityName = "Person"
   ResetViewFromSubobject( zqFrame )
   
   ACTIVATE zqFrame EMPTY 
   NAME VIEW zqFrame "zqFrameTest2" 
   CREATE ENTITY zqFrame.zqFrame 
   CREATE ENTITY zqFrame.ParentEntity 
   zqFrame.ParentEntity.EntityName = "Student"
   CREATE ENTITY zqFrame.ChildEntity  
   SetViewToSubobject( zqFrame, "ChildEntity" ) 
   zqFrame.ParentEntity.EntityName = "Person"
   ResetViewFromSubobject( zqFrame )*/

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_CreateContactList
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_CreateContactList( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW wXferO2    BASED ON LOD  wXferO
   VIEW mConList   BASED ON LOD  mConList
   VIEW vResultSet BASED ON LOD  qProspct
   VIEW zqFrame    BASED ON LOD  zqFrame
   VIEW mUser      REGISTERED AS mUser
   STRING ( 32 ) szRootEntityName
   STRING ( 32 ) szIncludeEntity
   STRING ( 32 ) szCreateEntity
   STRING ( 32 ) szSourceIncludeEntity
   SHORT         nRC
   
   // Do nothing if there is no object yet.
   GET VIEW zqFrame NAMED "zqFrame"
   IF RESULT < 0
      RETURN 2
   END
   
   // KJS 09/05/19 - If ContactListType is blank, then there are no contact lists associated with this query. Like qUserPrm... Users have not contact lists.
   IF wXferO.QueryObject.ContactListType = ""
      MessageSend( ViewToWindow, "NoConList", "Save Result Set",
                   "A contact list cannot be created if a single Query Object was not selected.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Create a Contact List entry made up of each selected type of entry.
   ACTIVATE mConList EMPTY
   NAME VIEW mConList "mConList"
   CREATE ENTITY mConList.ContactList
   INCLUDE mConList.AdministrativeDivision FROM mUser.CurrentAdministrativeDivision
   INCLUDE mConList.User FROM mUser.User
   CreateViewFromView( wXferO2, wXferO )
   SET CURSOR FIRST wXferO2.QueryObject
              WHERE wXferO2.QueryObject.ObjectName = zqFrame.zqFrame.QueryObjectName
   mConList.ContactList.Type = wXferO2.QueryObject.ContactListType
   DropView( wXferO2 )
   SetAttributeFromCurrentDateTime( mConList, "ContactList", "DateGenerated" )
   GET VIEW vResultSet NAMED "ResultSet"
   szRootEntityName = zqFrame.zqFrame.QueryObjectRootEntityName 
   IF wXferO.QueryObject.SourceIncludeEntityName != ""
      // A Source Include Entity Name is specified.
      szSourceIncludeEntity = wXferO.QueryObject.SourceIncludeEntityName 
   ELSE
      // No Source Include Entity Name is specified.
      szSourceIncludeEntity = szRootEntityName
   END
   
   // Loop through display entities and create Contact List entry for each selected.
   FOR zqFrame.ResultSetDisplayRow WHERE zqFrame.ResultSetDisplayRow.wSelected = "Y"
   
      // We will do the include of the root entity from the Result Set.
      nRC = SetCursorFirstEntityByInteger( vResultSet, szRootEntityName, "ID", zqFrame.ResultSetDisplayRow.RootEntityID, "" )
      IF nRC >= zCURSOR_SET 
         
         szIncludeEntity = wXferO.QueryObject.ContactListIncludeEntityName 
         szCreateEntity  = wXferO.QueryObject.ContactListCreateEntityName 
         IF szCreateEntity = szIncludeEntity
            // There is no Create Entity.
            IncludeSubobjectFromSubobject( mConList, szIncludeEntity, vResultSet, szSourceIncludeEntity, zPOS_AFTER )
         ELSE
            // There is a Create Entity.
            CreateEntity( mConList, szCreateEntity, zPOS_AFTER )
            IncludeSubobjectFromSubobject( mConList, szIncludeEntity, vResultSet, szSourceIncludeEntity, zPOS_AFTER )
         END
         
      END
   END
 
END

/*************************************************************************************************
**    
**    OPERATION: SAVE_ContactList
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_ContactList( VIEW ViewToWindow )

   VIEW mUser        REGISTERED AS mUser
   VIEW mConList     REGISTERED AS mConList
   VIEW mConListPrev BASED ON LOD  mConList
   STRING ( 50 ) szConListName
   STRING ( 10 ) szConListType

   // Save the Contact List.
   COMMIT mConList
   
   // Refresh the Contact List from the previous page. 
   // The Type is the same as for mConList.
   // The Name depends on the Type.
   szConListType = mConList.ContactList.Type 
   szConListName = "mConList" + szConListType + "LST"
   
   // Drop and reactivate the list.
   GET VIEW mConListPrev NAMED szConListName
   DropObjectInstance( mConListPrev )
   ACTIVATE mConListPrev MULTIPLE
      WHERE mConListPrev.ContactList.Type = szConListType AND
            mConListPrev.AdministrativeDivision.ID = mUser.CurrentAdministrativeDivision.ID AND
            mConListPrev.User.ID = mUser.User.ID
   NAME VIEW mConListPrev szConListName
   
   DropObjectInstance( mConList )

END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_ContactList
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_ContactList( VIEW ViewToWindow )

   VIEW mConList REGISTERED AS mConList

   // Drop the Contact List.
   DropObjectInstance( mConList )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_CreateRecurringContactList
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_CreateRecurringContactList( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQueryLST REGISTERED AS zqSQueryLST
   VIEW wXferO2     BASED ON LOD  wXferO
   VIEW mConList    BASED ON LOD  mConList
   VIEW mUser       REGISTERED AS mUser
   STRING ( 32 ) RootEntityName
   SHORT         nRC
   
   // Make sure that Contact Lists are allowed to be created for this Query Object.
   IF wXferO.QueryObject.ContactListType = ""
      MessageSend( ViewToWindow, "NoConList", "Save Result Set",
                   "A contact list can not be created.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Create a Contact List entry made up of each selected type of entry.
   ACTIVATE mConList EMPTY
   NAME VIEW mConList "mConList"
   CREATE ENTITY mConList.ContactList
   INCLUDE mConList.AdministrativeDivision FROM mUser.CurrentAdministrativeDivision
   INCLUDE mConList.User FROM mUser.User
   INCLUDE mConList.DynamicCL_StoredQuery FROM zqSQueryLST.StoredQuery 
   mConList.ContactList.Type = wXferO.QueryObject.ContactListType 
   mConList.ContactList.DynamicFlag = "Y"
   CreateViewFromView( wXferO2, wXferO )
   SET CURSOR FIRST wXferO2.QueryObject WHERE wXferO2.QueryObject.ObjectName = zqSQueryLST.StoredQuery.ObjectName 
   mConList.ContactList.Type = wXferO2.QueryObject.ContactListType
   mConList.ContactList.Note = zqSQueryLST.StoredQuery.Description 
   DropView( wXferO2 )
   SetAttributeFromCurrentDateTime( mConList, "ContactList", "DateGenerated" )

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_RecurringContactList
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_RecurringContactList( VIEW ViewToWindow )

   VIEW mUser        REGISTERED AS mUser
   VIEW mConList     REGISTERED AS mConList
   VIEW mConListPrev BASED ON LOD  mConList
   STRING ( 50 ) szConListName
   STRING ( 10 ) szConListType

   // Save the Contact List.
   COMMIT mConList
   
   // Refresh the Contact List from the previous page. 
   // The Type is the same as for mConList.
   // The Name depends on the Type.
   szConListType = mConList.ContactList.Type 
   szConListName = "mConList" + szConListType + "LST"
   
   // Drop and reactivate the list.
   GET VIEW mConListPrev NAMED szConListName
   DropObjectInstance( mConListPrev )
   ACTIVATE mConListPrev MULTIPLE
      WHERE mConListPrev.ContactList.Type = szConListType AND
            mConListPrev.AdministrativeDivision.ID = mUser.CurrentAdministrativeDivision.ID AND
            mConListPrev.User.ID = mUser.User.ID
   NAME VIEW mConListPrev szConListName
   
   DropObjectInstance( mConList )

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_DocumentMaintenanceList
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_DocumentMaintenanceList( VIEW ViewToWindow )

   VIEW zqMDocOLST BASED ON LOD  zqMDocO
   VIEW wXferO     REGISTERED AS wXferO
   VIEW ResultSet

   GET VIEW zqMDocOLST NAMED "zqMDocOLST"
   IF RESULT >= 0
      DropObjectInstance( zqMDocOLST )
   END

   GET VIEW ResultSet NAMED "ResultSet"
   IF RESULT >= 0
      DropObjectInstance( ResultSet )
   END

   wXferO.Root.CurrentFunction = ""

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_DocumentNew
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_DocumentNew( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS wXferO
   VIEW mUser   REGISTERED AS mUser
   VIEW sHost   REGISTERED AS sHost
   VIEW zqMDocO BASED ON LOD  zqMDocO
   
   // Initialize empty Document object.
   ACTIVATE zqMDocO EMPTY
   CREATE ENTITY zqMDocO.Document
   //zqMDocO.Document.ObjectName = wXferO.QueryValues.QueryObjectName
   zqMDocO.Document.ObjectName = wXferO.QueryObject.ObjectName
   zqMDocO.Document.GenerateContactActivityFlag = "Y"
   NAME VIEW zqMDocO "zqMDocO"
   zqMDocO.Document.FunctionalAreaName = wXferO.FunctionalArea.FunctionalAreaName 
   INCLUDE zqMDocO.AdministrativeDivision FROM mUser.CurrentAdministrativeDivision
   
   //zqMDocO.Document.UploadDirectory = sHost.Host.CustomRelPath + "documents/" 
   zqMDocO.Document.UploadDirectory = sHost.Host.CustomDir + "documents/" 

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_DocumentUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_DocumentUpdate( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW zqMDocO    BASED ON LOD  zqMDocO

   ACTIVATE zqMDocO SingleForUpdate WHERE zqMDocO.Document.ID = zqMDocOLST.Document.ID
   NAME VIEW zqMDocO "zqMDocO"
   
   // Include the selectable object, if the Document contains an object name.
   IF zqMDocO.Document.ObjectName != ""
      SET CURSOR FIRST wXferO.QueryObject WHERE wXferO.QueryObject.ObjectName = zqMDocO.Document.ObjectName 
      CREATE ENTITY zqMDocO.QueryObject 
      zqMDocO.QueryObject.ObjectName = zqMDocO.Document.ObjectName
   END

END

/*************************************************************************************************
**    
**    OPERATION: DELETE_Document
**    
*************************************************************************************************/
DIALOG OPERATION
DELETE_Document( VIEW ViewToWindow )


   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW zqMDocO    BASED ON LOD  zqMDocO
   SHORT nRC

   ACTIVATE zqMDocO SingleForUpdate WHERE zqMDocO.Document.ID = zqMDocOLST.Document.ID
   DELETE ENTITY zqMDocO.Document
   COMMIT zqMDocO
   DropObjectInstance( zqMDocO )
   DropEntity( zqMDocOLST, "Document", zREPOS_NONE )

END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_Document
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_Document( VIEW ViewToWindow )

   VIEW zqMDocO REGISTERED AS zqMDocO

   DropObjectInstance( zqMDocO )

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_Document
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_Document( VIEW ViewToWindow )

   VIEW zqMDocO2   BASED ON LOD  zqMDocO
   VIEW zqMDocO    REGISTERED AS zqMDocO
   VIEW zqMDocOLST BASED ON LOD  zqMDocO
   VIEW mReport    BASED ON LOD  mReport
   VIEW KZXMLPGO
   STRING ( 4 ) Suffix
   
   // Make sure that a TemplateFileName is specified.
   IF zqMDocO.Document.TemplateFileName = ""
      MessageSend( ViewToWindow, "DirNameReq", "", "File Directory/Name is required.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // A Document Object Name must be specified.
   IF zqMDocO.Document.ObjectName = ""
      MessageSend( ViewToWindow, "ObjectReq", "", "Object is required.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Make sure that a Document by the same name doesn't exist.
   ACTIVATE zqMDocO2 WHERE zqMDocO2.Document.Name             = zqMDocO.Document.Name 
                       AND zqMDocO2.AdministrativeDivision.ID = zqMDocO.AdministrativeDivision.ID 
                       AND zqMDocO2.Document.ID              != zqMDocO.Document.ID 
   IF RESULT >= 0  
      MessageSend( ViewToWindow, "", "", "A Document by the same Name currently exists", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   
   // If the document type is Email, make sure the suffix of all files is
   // "txt" or HTML.  Otherwise, make sure the suffix of all files is RTF.
   IF zqMDocO.Document.DocType = "T"
      ReturnSuffixOfFileName( Suffix, zqMDocO.Document.TemplateFileName )
      IF Suffix != "txt"
         
         //RETURN 2
      END
   END 

   // Commit document.
   COMMIT zqMDocO
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "", "DB Error - Contact Systems Support", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Take action based on previous page.
   GET VIEW KZXMLPGO NAMED "KZXMLPGO"
   IF KZXMLPGO.PagePath.LastPageName = "wQueryDocumentMaintList"  
      // Since we came from Document List, add/update the entry in the list.
      GET VIEW zqMDocOLST NAMED "zqMDocOLST"
      IF RESULT >= 0 
         IF zqMDocOLST.Document EXISTS
            IF zqMDocOLST.Document.ID = zqMDocO.Document.ID
               EXCLUDE zqMDocOLST.Document
            END
         END
         INCLUDE zqMDocOLST.Document FROM  zqMDocO.Document
      END
   ELSE
      // Since we came from Report (Packaged Query), relink the Document into the report.
      GET VIEW mReport NAMED "mReport"
      IF RESULT >= 0
         IF mReport.Document DOES NOT EXIST
            INCLUDE mReport.Document FROM zqMDocO.Document 
         ELSE
            IF zqMDocO.Document.ID = mReport.Document.ID 
               RelinkInstanceToInstance( mReport, "Document", zqMDocO, "Document" )
            END
         END
      END
   END
   
   DropObjectInstance( zqMDocO )

END

/*************************************************************************************************
**    
**    OPERATION: UNZIP_DocumentFileToDirectory
**    
*************************************************************************************************/
DIALOG OPERATION
UNZIP_DocumentFileToDirectory( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS wXferO
   VIEW zqMDocO REGISTERED AS zqMDocO
   VIEW sHost   REGISTERED AS sHost
   STRING ( 500 ) szZipDirectoryName
   //STRING ( 500 ) szZipDirectoryNameSuffix
   STRING ( 500 ) szDocumentDirectoryFileName
   INTEGER nRC
   
   // Unzip the ODT Document Template file into the Zip Directory for editing the "content" file.
   IF zqMDocO.Document.DocType != "O" AND zqMDocO.Document.DocType != "D"
      MessageSend( ViewToWindow, "", "", "This function is only valid for an ODT or DOCX Template File.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // The Unzip/Zip Directory depends on Document Type.
   IF zqMDocO.Document.DocType = "O"
      // Document Type is ODT.
      szZipDirectoryName = sHost.Host.OD_FileUnzipZipDirectory 
   ELSE
      // Document Type id DOCX.
      szZipDirectoryName = sHost.Host.DOCX_FileUnzipZipDirectory 
   END
   //FindDirectorySuffix( ViewToWindow, szZipDirectoryName, szZipDirectoryNameSuffix )
   //szDocumentDirectoryFileName = zqMDocO.Document.TemplateFileName 
   szDocumentDirectoryFileName = zqMDocO.Document.UploadDirectory + zqMDocO.Document.TemplateFileName 
   
   nRC = UnZipFile( szDocumentDirectoryFileName, szZipDirectoryName )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "", "The Template file could not be unzipped.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
END

/*************************************************************************************************
**    
**    OPERATION: ZIP_DirectoryToDocumentFile
**    
*************************************************************************************************/
DIALOG OPERATION
ZIP_DirectoryToDocumentFile( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS wXferO
   VIEW zqMDocO REGISTERED AS zqMDocO
   VIEW sHost   REGISTERED AS sHost
   STRING ( 500 ) szZipDirectoryName
   STRING ( 500 ) szZipDirectoryNameSuffix
   STRING ( 500 ) szDocumentDirectoryFileName
   INTEGER nRC
   
   // Zip the Zip Directory containing the "content" file back to the ODT Document Template file.
   IF zqMDocO.Document.DocType != "O" AND zqMDocO.Document.DocType != "D"
      MessageSend( ViewToWindow, "", "", "This function is only valid for an ODT or DOCX Template File.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // The Unzip/Zip Directory depends on Document Type.
   IF zqMDocO.Document.DocType = "O"
      // Document Type is ODT.
      szZipDirectoryName = sHost.Host.OD_FileUnzipZipDirectory 
   ELSE
      // Document Type id DOCX.
      szZipDirectoryName = sHost.Host.DOCX_FileUnzipZipDirectory 
   END
   FindSuffixForDirectory( ViewToWindow, szZipDirectoryName, szZipDirectoryNameSuffix )
   //szDocumentDirectoryFileName = zqMDocO.Document.TemplateFileName 
   szDocumentDirectoryFileName = zqMDocO.Document.UploadDirectory + zqMDocO.Document.TemplateFileName 
   
   nRC = ZipDirectory( szZipDirectoryName, szDocumentDirectoryFileName, szZipDirectoryNameSuffix )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "", "The Template file could not be zipped.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
END

/*************************************************************************************************
**    
**    OPERATION: SELECT_QueryObjectForDocument
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_QueryObjectForDocument( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS wXferO
   VIEW zqMDocO REGISTERED AS zqMDocO

   // Set the selected Object Name and then reset the selected list to null.
   IF wXferO.QueryObject.ObjectName = ""
      MessageSend( ViewToWindow, "ObjectReq", "", "Object is required.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   IF zqMDocO.QueryObject DOES NOT EXIST
      CREATE ENTITY zqMDocO.QueryObject  
   END
   zqMDocO.QueryObject.ObjectName = wXferO.QueryObject.ObjectName
   zqMDocO.Document.ObjectName    = wXferO.QueryObject.ObjectName
   SET CURSOR FIRST wXferO.QueryValues  

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_MergeDocumentsLST
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_MergeDocumentsLST( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW sAppMgr2   BASED ON LOD  sAppMgr
   VIEW zqMDocOLST BASED ON LOD  zqMDocO
   VIEW mQryObj    BASED ON LOD  mQryObj
      INTEGER nRC
         VIEW mUser      REGISTERED AS mUser
            STRING ( 6 )  szPermissions 
   // Activate list of Documents for current Functional Area.
      IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   
      SET CURSOR FIRST sAppMgr.FunctionalSubArea 
       WHERE sAppMgr.FunctionalSubArea.FunctionalSubAreaName = "Custom Queries"
           TraceLineS("Area 1: ",sAppMgr.FunctionalArea.dFunctionalAreaTr)
    TraceLineS("SubArea 1: ",sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr)

         
     nRC = SectionAccessAllowed( mUser, "",  sAppMgr.FunctionalArea.FunctionalAreaName, sAppMgr.FunctionalSubArea.FunctionalSubAreaName, szPermissions )

   IF  nRC < 0 OR szPermissions = "     "
      MessageSend ( ViewToWindow, "AccDenied", "Access",
                    "Access is denied by your security settings.",
                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

    TraceLineS("Area 2: ",sAppMgr.FunctionalArea.dFunctionalAreaTr)
    TraceLineS("SubArea 2: ",sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr)

   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr 


   // Remove any currenty entries.
   IF wXferO.QueryValues EXISTS
      DELETE ENTITY wXferO.QueryValues  
   END
   BuildQueryObjectList( mQryObj, ViewToWindow, "" )
   
   GET VIEW zqMDocOLST NAMED "zqMDocOLST"
   IF RESULT >= 0
      DropObjectInstance( zqMDocOLST )
   END
   
   // Make sure QueryValues entity exists.
   IF wXferO.QueryValues DOES NOT EXIST
      CREATE ENTITY wXferO.QueryValues  
   END
   
   
   ACTIVATE  zqMDocOLST Multiple  WHERE zqMDocOLST.Document.FunctionalAreaName = wXferO.FunctionalArea.FunctionalAreaName
   NAME VIEW zqMDocOLST "zqMDocOLST"
   OrderEntityForView( zqMDocOLST, "Document", "Name A" )
   SET CURSOR FIRST zqMDocOLST.Document  
   
   // Set up FormatOverrideObject subobject for object selection. It is the same as QueryObject except that it
   // starts with a null entry.
   FOR EACH wXferO.FormatOverrideObject 
      DELETE ENTITY wXferO.FormatOverrideObject NONE 
   END
   CREATE ENTITY wXferO.FormatOverrideObject 
   FOR EACH wXferO.QueryObject 
      CREATE ENTITY wXferO.FormatOverrideObject 
      wXferO.FormatOverrideObject.ObjectName   = wXferO.QueryObject.ObjectName 
      wXferO.FormatOverrideObject.ExternalName = wXferO.QueryObject.ExternalName 
   END 
   SET CURSOR FIRST wXferO.FormatOverrideObject

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_DisplayCopyMappingData
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_DisplayCopyMappingData( VIEW ViewToWindow )

   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW wXferO     REGISTERED AS wXferO
   VIEW zqFrame    BASED ON LOD  zqFrame
   VIEW QueryView
   INTEGER nRC

   // Set up the zqFrame object for object mapping.
   // This is the same logic as that used in creating a new Query, which does the initialization necessary
   // for the Merge Documents tab.
   wXferO.QueryObject.ObjectName = zqMDocOLST.Document.ObjectName 
   nRC = SetUpForNewQuery( zqFrame, ViewToWindow )
   IF nRC = 2
      RETURN 2
   END
   
   // Initialize data for QueryUpdate.
   GET VIEW zqFrame NAMED "zqFrame"
   GET VIEW QueryView NAMED "QueryView"
   InitQueryUpdate( zqFrame, QueryView )
   //InitializeQueryUpdate( ViewToWindow )

END

/*************************************************************************************************
**    
**    OPERATION: PRINT_MergeDocuments
**    
*************************************************************************************************/
DIALOG OPERATION
PRINT_MergeDocuments( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sHost      REGISTERED AS sHost
   VIEW mUser      REGISTERED AS mUser
   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW mConList   BASED ON LOD  mConList
   VIEW QueryView 
   VIEW vQualObject
   VIEW ResultSet 
   STRING ( 50 )  szObjectName
   STRING ( 50 )  szRootEntityName
   STRING ( 50 )  szLoopingEntityName
   STRING ( 50 )  szDataEntityName
   STRING ( 50 )  szConListName
   STRING ( 500 ) szTemplateDirectoryFileName
   STRING ( 500 ) szOutputDirectoryFileName
   STRING ( 1 )   szSelected
   INTEGER nRC
   
   // Process an ODT Document for Print.
   
   // Make sure template and output files are specified.
   szTemplateDirectoryFileName = zqMDocOLST.Document.UploadDirectory + zqMDocOLST.Document.TemplateFileName
   szOutputDirectoryFileName   = zqMDocOLST.Document.OutputFileName
   IF szTemplateDirectoryFileName = "" //OR szOutputDirectoryFileName = ""
      MessageSend( ViewToWindow, "", "", "The Document Definition does not include both a template and an output file name.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Make sure Document Type is ODT.
   IF zqMDocOLST.Document.DocType != "O" AND zqMDocOLST.Document.DocType != "D" AND zqMDocOLST.Document.DocType != "H"
      MessageSend( ViewToWindow, "", "", "The Document must be an ODT or DOCX document.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Delete any existing ActivateID_List entries in preparation for activates below.
   FOR EACH wXferO.ActivateID_List 
      DELETE ENTITY wXferO.ActivateID_List NONE 
   END
   
   // Activate LOD to get RootEntityName.
   szObjectName = zqMDocOLST.Document.ObjectName 
   nRC = ActivateQueryViewByName( zqMDocOLST, QueryView, szObjectName )
   IF nRC < 0
      RETURN 2
   END
   NAME VIEW QueryView "QueryView"
   szRootEntityName = QueryView.LOD_EntityParent.Name
   
   // The mConList entry for merging documents should be named "mConListDocMerge"
   GET VIEW mConList NAMED "mConListDocMerge"
   IF RESULT < 0
      MessageSend( zqMDocOLST, "", "", "Error finding Contact List.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   nRC = SetCursorFirstEntityByString( mConList, szLoopingEntityName, "wSelected", "Y", "" )
   IF nRC < 0
      MessageSend( zqMDocOLST, "", "", "No Contact List entry was selected.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
      
   // Build ActivateID_List entries for each selected Contact List entry.
   nRC = SetCursorFirstEntity( mConList, szLoopingEntityName, "" )
   LOOP WHILE nRC >= zCURSOR_SET 
      GetStringFromAttribute( szSelected, mConList, szLoopingEntityName, "wSelected" )
      IF szSelected = "Y" 
         // Add ID to activate list.
         CREATE ENTITY wXferO.ActivateID_List
         SetAttributeFromAttribute( wXferO, "ActivateID_List", "ID", mConList, szDataEntityName, "ID" )
      END
      nRC = SetCursorNextEntity( mConList, szLoopingEntityName, "" ) 
   END
   
   // Format output file of merged entries.
   GenerateQualFromEntityList( vQualObject, wXferO, "ActivateID_List", "", 0 )  
   NAME VIEW vQualObject "vQualObjectMergePrint"
   SET CURSOR FIRST vQualObject.KeyList 
   IF RESULT >= zCURSOR_SET
       vQualObject.QualAttrib.Oper = "IN"
   END
   ActivateObjectInstance( ResultSet, szObjectName, ViewToWindow, vQualObject, zMULTIPLE )
   NAME VIEW ResultSet "ResultSetPrint"
   
   
   // Output file suffix and insert operation depend on Document Type.
   IF zqMDocOLST.Document.DocType = "O"
      // Document Type is ODT.
      IF szOutputDirectoryFileName = ""
         szOutputDirectoryFileName   = sHost.Host.TempDir + mUser.User.UserName + "QueryResult.odt"
      END
      wXferO.QueryValues.OutputFileName = szOutputDirectoryFileName
      
      // Merge the data into the template.
      nRC = InsertOI_DataIntoODT_Template( ResultSet, 
                                           szOutputDirectoryFileName,
                                           szTemplateDirectoryFileName, 
                                           szRootEntityName )
   ELSE
   IF zqMDocOLST.Document.DocType = "D"
      // Document Type is DOCX.
      IF szOutputDirectoryFileName = ""
         szOutputDirectoryFileName   = sHost.Host.TempDir + mUser.User.UserName + "QueryResult.docx" 
      END
      wXferO.QueryValues.OutputFileName = szOutputDirectoryFileName
      
      // Merge the data into the template.
      nRC = InsertOI_DataIntoDOCX_Template( ResultSet, 
                                            szOutputDirectoryFileName,
                                            szTemplateDirectoryFileName, 
                                            szRootEntityName )
   ELSE
      // Document Type is HTML.
      IF szOutputDirectoryFileName = ""
         szOutputDirectoryFileName   = sHost.Host.TempDir + mUser.User.UserName + "QueryResult.html" 
      END
      wXferO.QueryValues.OutputFileName = szOutputDirectoryFileName
      
      // Merge the data into the template.
      nRC = InsertOI_DataIntoTemplateFile( ResultSet, 
                                           szOutputDirectoryFileName,
                                           szTemplateDirectoryFileName, 
                                           szRootEntityName )
   END
   END
   IF nRC = 2
      RETURN 2
   END
   IF nRC < 0
      MessageSend( ViewToWindow, "", "",
                   "An error was encountered during Merge processing.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Set up File Name for saving to local directory.
   IF wXferO.QueryValues DOES NOT EXIST
      CREATE ENTITY wXferO.QueryValues 
   END
   wXferO.QueryValues.OutputFileName = szOutputDirectoryFileName

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_SendEmailAttachment
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_SendEmailAttachment( VIEW ViewToWindow )

   MessageSend( ViewToWindow, "", "", "Not currently implemented.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildDocumentSelectForSend
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildDocumentSelectForSend( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW zqMDocOLST BASED ON LOD  zqMDocO
   VIEW QueryView
   STRING ( 1 ) szActivateFlag
   STRING ( 100 ) szLangConv
   
   GetTextConv(szLangConv,ViewToWindow,"Print/Send Documents","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   // Activate list of Documents for current Functional Area as necessary.
   
   GET VIEW zqMDocOLST NAMED "zqMDocOLST"
   IF RESULT < 0
      ACTIVATE  zqMDocOLST Multiple  WHERE zqMDocOLST.Document.FunctionalAreaName = sAppMgr.FunctionalArea.FunctionalAreaName 
      NAME VIEW zqMDocOLST "zqMDocOLST"
      OrderEntityForView( zqMDocOLST, "Document", "Name A" )
      SET CURSOR FIRST zqMDocOLST.Document
   END
   
   // Make sure the QueryView object doesn't exist as it has been crashing ActivateQueryViewByName.
   GET VIEW QueryView NAMED "QueryView"
   IF RESULT >= 0
      DropObjectInstance( QueryView )
   END

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildCategoryMaintenanceList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildCategoryMaintenanceList( VIEW ViewToWindow )

   VIEW zqSCatagLST BASED ON LOD  zqSCatag
   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC

   STRING ( 100 ) szLangConv
   
   GetTextConv(szLangConv,ViewToWindow,"Categories","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
   GET VIEW zqSCatagLST NAMED "zqSCatagLST"
   IF RESULT < 0
       ACTIVATE zqSCatagLST RootOnlyMultiple
       NAME VIEW zqSCatagLST "zqSCatagLST"    
   END
 
END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_CategoryMaintenanceList
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_CategoryMaintenanceList( VIEW ViewToWindow )

   VIEW zqSCatagLST BASED ON LOD  zqSCatag

   GET VIEW zqSCatagLST NAMED "zqSCatagLST"
   IF RESULT >= 0
      DropObjectInstance( zqSCatagLST )
   END

END

/*************************************************************************************************
**    
**    OPERATION: DELETE_Category
**    
*************************************************************************************************/
DIALOG OPERATION
DELETE_Category( VIEW ViewToWindow )


   VIEW zqSCatagLST REGISTERED AS zqSCatagLST
   VIEW zqSCatag    BASED ON LOD  zqSCatag
   SHORT nRC
   
   // Make sure that the Category isn't assigned to a Query, and if it isn't, simply delete it..
   ACTIVATE zqSCatag SingleForUpdate WHERE zqSCatag.StoredQueryCategory.ID = zqSCatagLST.StoredQueryCategory.ID 
   NAME VIEW zqSCatag "zqSCatagDelete"
   IF zqSCatag.StoredQuery EXISTS
      MessageSend( ViewToWindow, "", "", "A Category used by Stored Queries cannot be deleted.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      DropObjectInstance( zqSCatag )
      RETURN 2
   END
   DELETE ENTITY zqSCatag.StoredQueryCategory
   COMMIT zqSCatag
   DropObjectInstance( zqSCatag )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_CategoryNew
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_CategoryNew( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS wXferO
   VIEW mUser   REGISTERED AS mUser
   VIEW sAppMgr REGISTERED AS sAppMgr
   VIEW zqSCatag BASED ON LOD  zqSCatag
   
   // Initialize empty Category object.
   ACTIVATE zqSCatag EMPTY
   CREATE ENTITY zqSCatag.StoredQueryCategory
   NAME VIEW zqSCatag "zqSCatag"

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_CategoryUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_CategoryUpdate( VIEW ViewToWindow )

   VIEW zqSCatagLST REGISTERED AS zqSCatagLST
   VIEW zqSCatag    BASED ON LOD  zqSCatag

   ACTIVATE zqSCatag SingleForUpdate WHERE zqSCatag.StoredQueryCategory.ID = zqSCatagLST.StoredQueryCategory.ID
   NAME VIEW zqSCatag "zqSCatag"

END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_Category
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_Category( VIEW ViewToWindow )

   VIEW zqSCatag REGISTERED AS zqSCatag

   DropObjectInstance( zqSCatag )

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_Category
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_Category( VIEW ViewToWindow )

   VIEW zqSCatag2   BASED ON LOD  zqSCatag
   VIEW zqSCatag    REGISTERED AS zqSCatag
   VIEW zqSCatagLST REGISTERED AS zqSCatagLST
   STRING ( 4 ) Suffix
   
   // Make sure that Category Name is entered and that it is unique.
   IF zqSCatag.StoredQueryCategory.Name = ""
      MessageSend( ViewToWindow, "CategoryReq", "", "Category is required.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   ACTIVATE zqSCatag2 WHERE zqSCatag2.StoredQueryCategory.Name = zqSCatag.StoredQueryCategory.Name 
                        AND zqSCatag2.StoredQueryCategory.ID  != zqSCatag.StoredQueryCategory.ID 
   IF RESULT >= 0 
      MessageSend( ViewToWindow, "", "", "A Category by that Name currently exists.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Commit document.
   COMMIT zqSCatag
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "", "DB Error - Contact Systems Support", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Reactivate the list.
   DropObjectInstance( zqSCatagLST )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_PackagedQueries
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_PackagedQueries( VIEW ViewToWindow )

   VIEW mReportLST  BASED ON LOD  mReport
   VIEW zqSCatagLST BASED ON LOD  zqSCatag
   VIEW mUGroupsLST BASED ON LOD  mUGroups
   VIEW sAppMgr     REGISTERED AS sAppMgr
   VIEW mUser       REGISTERED AS mUser
   INTEGER nRC
   STRING ( 6 )  szPermissions 
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   
   SET CURSOR FIRST sAppMgr.FunctionalSubArea 
              WHERE sAppMgr.FunctionalSubArea.FunctionalSubAreaName = "Custom Queries"
 
   nRC = SectionAccessAllowed( mUser, "",  sAppMgr.FunctionalArea.FunctionalAreaName, sAppMgr.FunctionalSubArea.FunctionalSubAreaName, szPermissions )
   IF  nRC < 0 OR szPermissions = "     "
      MessageSend ( ViewToWindow, "AccDenied", "Access",
                    "Access is denied by your security settings.",
                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr 

   // Activate the list of Query Reports.
   ACTIVATE mReportLST Multiple WHERE mReportLST.Report.PackagedQueryFlag = "Y"
   NAME VIEW mReportLST "mReportLST" 
   OrderEntityForView( mReportLST, "Report", "ReportGroup.Name A" )
   SET CURSOR FIRST mReportLST.Report  

   // Make sure list of Stored Query Catagories exists.
   GET VIEW zqSCatagLST NAMED "zqSCatagLST"
   IF RESULT < 0
       ACTIVATE zqSCatagLST RootOnlyMultiple
       NAME VIEW zqSCatagLST "zqSCatagLST"    
   END
   
   // Always activate a new User Group List to pick up changes someone else may have made.
   GET VIEW mUGroupsLST NAMED "mUGroupsLST"
   IF RESULT >= 0
      DropObjectInstance( mUGroupsLST )
   END
   ACTIVATE mUGroupsLST Multiple
         RESTRICTING mUGroupsLST.SecuritySet TO mUGroupsLST.SecuritySet.ID = 0
   NAME VIEW mUGroupsLST "mUGroupsLST" 
   OrderEntityForView( mUGroupsLST, "UserGroup", "GroupName A" )
   SET CURSOR FIRST mUGroupsLST.UserGroup  
   
END

/*************************************************************************************************
**    
**    OPERATION: GOTO_ReportQuery
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_ReportQuery( VIEW ViewToWindow )

    VIEW mReportG REGISTERED AS mReportG
    VIEW wXferO   REGISTERED AS wXferO
    VIEW KZXMLPGO
    
    // Set the value to include enrolled classes on transcript to "Y" as the default.
    IF mReportG.Report.InternalName = "TranscriptXLS" 
       wXferO.Root.IncludeEnrolledOnTranscript = "Y"
       wXferO.Root.GradUndergradFlag = ""
    ELSE
       wXferO.Root.IncludeEnrolledOnTranscript = ""
    END
    
    IF mReportG.Report.InternalName = "EnrollmentSemesterCompXLS" 
       GET VIEW KZXMLPGO NAMED "KZXMLPGO"
       CREATE ENTITY KZXMLPGO.NextDialogWindow
       KZXMLPGO.NextDialogWindow.DialogName = "nReport" 
       KZXMLPGO.NextDialogWindow.WindowName = "EnrollmentSemesterComparison"
       CREATE ENTITY KZXMLPGO.PagePath
       KZXMLPGO.PagePath.LastPageName = "nReportReportList"
    END
    IF mReportG.Report.InternalName = "EnrollmentYearlyCompXLS" 
       GET VIEW KZXMLPGO NAMED "KZXMLPGO"
       CREATE ENTITY KZXMLPGO.NextDialogWindow
       KZXMLPGO.NextDialogWindow.DialogName = "nReport" 
       KZXMLPGO.NextDialogWindow.WindowName = "EnrollmentComparison"
       CREATE ENTITY KZXMLPGO.PagePath
       KZXMLPGO.PagePath.LastPageName = "nReportReportList"
    END
    IF mReportG.Report.InternalName = "CHED_SOAPPRPT" //OR mReportG.Report.InternalName = "TranscriptXLS"
       GET VIEW KZXMLPGO NAMED "KZXMLPGO"
       CREATE ENTITY KZXMLPGO.NextDialogWindow
       KZXMLPGO.NextDialogWindow.DialogName = "nReport" 
       KZXMLPGO.NextDialogWindow.WindowName = "CHED_SOApp"
       CREATE ENTITY KZXMLPGO.PagePath
       KZXMLPGO.PagePath.LastPageName = "nReportReportList"
    END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_CustomQueries
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_CustomQueries( VIEW ViewToWindow )

   VIEW sAppMgr REGISTERED AS sAppMgr
   VIEW mUser   REGISTERED AS mUser
   INTEGER nRC
   STRING ( 6 )  szPermissions 
    
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   SET CURSOR FIRST sAppMgr.FunctionalSubArea 
              WHERE sAppMgr.FunctionalSubArea.FunctionalSubAreaName = "Custom Queries"
   nRC = SectionAccessAllowed( mUser, "",  sAppMgr.FunctionalArea.FunctionalAreaName, sAppMgr.FunctionalSubArea.FunctionalSubAreaName, szPermissions )
   IF  nRC < 0 OR szPermissions = "     "
      MessageSend ( ViewToWindow, "AccDenied", "Access",
                    "Access is denied by your security settings.",
                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END

   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr 

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_UserSpecificReports
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_UserSpecificReports( VIEW ViewToWindow )

   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW mUser      REGISTERED AS mUser
   VIEW mReportLST BASED ON LOD  mReport
   INTEGER nRC
   STRING ( 6 )  szPermissions 
    
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   SET CURSOR FIRST sAppMgr.FunctionalSubArea 
              WHERE sAppMgr.FunctionalSubArea.FunctionalSubAreaName = "User Reports"
   nRC = SectionAccessAllowed( mUser, "",  sAppMgr.FunctionalArea.FunctionalAreaName, sAppMgr.FunctionalSubArea.FunctionalSubAreaName, szPermissions )
   IF  nRC < 0 OR szPermissions = "     "
      MessageSend ( ViewToWindow, "AccDenied", "Access",
                    "Access is denied by your security settings.",
                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr 
   
   // Activate list of Reports valid for this User.
   // Make sure that Report select list exists.
   GET VIEW mReportLST NAMED "mReportLST"
   IF RESULT >= 0
      DropObjectInstance( mReportLST )
   END
   ACTIVATE mReportLST Multiple WHERE mReportLST.AssignedToUserGroupUser.ID = mUser.User.ID 
                                   OR mReportLST.AssignedToUser.ID          = mUser.User.ID 
   NAME VIEW mReportLST "mReportLST"
   OrderEntityForView( mReportLST, "Report", "Name A" )
   SET CURSOR FIRST mReportLST.Report

END

/*************************************************************************************************
**    
**    OPERATION: TEST_Something
**    
*************************************************************************************************/
DIALOG OPERATION
TEST_Something( VIEW ViewToWindow )

   VIEW mStuSAPA BASED ON LOD  mStuSAPA
   VIEW mStuAcdS BASED ON LOD  mStuAcdS
   
   ACTIVATE mStuSAPA WHERE mStuSAPA.Student.ID = 13908
       RESTRICTING mStuSAPA.AcademicStanding TO mStuSAPA.AcademicStanding.ID = 606
   NAME VIEW mStuSAPA "mStuSAPA"
   ACTIVATE mStuAcdS WHERE mStuAcdS.Student.ID = 13908
       RESTRICTING mStuAcdS.AcademicStandingHonors TO mStuAcdS.AcademicStandingHonors.ID = 606
   NAME VIEW mStuAcdS "mStuAcdS"
   IF mStuAcdS.AcademicStandingHonors.FinancialStanding = "W"
      mStuAcdS.AcademicStandingHonors.FinancialStanding = ""
   ELSE
      mStuAcdS.AcademicStandingHonors.FinancialStanding = "W"
   END
   COMMIT mStuAcdS
   RelinkInstanceToInstance( mStuSAPA, "AcademicStanding", mStuAcdS, "AcademicStandingHonors" )

END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_GraphDefUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_GraphDefUpdate( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   
   CancelSubobject( zqFrame, "GraphDefinition")
   
   CLEAR_GraphParameters( ViewToWindow )
END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_GraphDefUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
CLEAR_GraphParameters( VIEW ViewToWindow )

   VIEW zqFrame REGISTERED AS zqFrame
   
   // GeneralParameters are created for listing in the graph display, but they are not needed since we use GraphMappingParameter.
   // We will delete them. Not seeing a reason we would have both...
   // Although, I'll keep the ones that are created for the grid, in case we would use that for selection criteria.
   IF zqFrame.GraphDefinition EXISTS
      FOR EACH zqFrame.GraphMappingParameter WHERE zqFrame.GeneralParameter.EntityName != "" AND zqFrame.GeneralParameter.AttributeName != ""
         SET CURSOR FIRST zqFrame.GeneralParameter WHERE zqFrame.GeneralParameter.EntityName = zqFrame.GraphMappingParameter.EntityName  AND
                                                         zqFrame.GeneralParameter.AttributeName = zqFrame.GraphMappingParameter.AttributeName  
         IF RESULT >= zCURSOR_SET
            zqFrame.GeneralParameter.wSelectedToShow = "Y"
         END                                                      
      END
   END
   FOR EACH zqFrame.GeneralParameter 
      IF zqFrame.GeneralParameter.wSelectedToShow = ""
         DELETE ENTITY zqFrame.GeneralParameter NONE 
      END 
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_MainMenu
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_MainMenu( VIEW ViewToWindow )

      VIEW KZXMLPGO

   // In going to the Main Menu, we need to clear the return path of pages that got us here. Otherwise, they build up.
   GET VIEW KZXMLPGO NAMED "KZXMLPGO"
   FOR EACH KZXMLPGO.PagePath
      DELETE ENTITY KZXMLPGO.PagePath NONE 
   END 

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_DocumentsFunctionalArea
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_DocumentsFunctionalArea( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW zqMDocOLST BASED ON LOD  zqMDocO

   // Activate the list of Documents for the selected Functional Area.
   GET VIEW zqMDocOLST NAMED "zqMDocOLST"
   IF RESULT >= 0
      DropObjectInstance( zqMDocOLST )
   END
   IF wXferO.FunctionalArea.FunctionalAreaName = ""
      ACTIVATE zqMDocOLST Multiple 
   ELSE
      ACTIVATE zqMDocOLST Multiple WHERE zqMDocOLST.Document.FunctionalAreaName = wXferO.FunctionalArea.FunctionalAreaName 
   END
   NAME VIEW zqMDocOLST "zqMDocOLST"

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_DocumentsByObject
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_DocumentsByObject( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW zqMDocOLST BASED ON LOD  zqMDocO

   // Activate the list of Documents for the selected Functional Area.
   GET VIEW zqMDocOLST NAMED "zqMDocOLST"
   IF RESULT >= 0
      DropObjectInstance( zqMDocOLST )
   END
   ACTIVATE zqMDocOLST Multiple WHERE zqMDocOLST.Document.ObjectName = wXferO.QueryObject.ObjectName 
   NAME VIEW zqMDocOLST "zqMDocOLST"

END

/*************************************************************************************************
**    
**    OPERATION: RESYNC_QueryWithRelatedReports
**    
*************************************************************************************************/
DIALOG OPERATION
RESYNC_QueryWithRelatedReports( VIEW ViewToWindow )

   VIEW zqSQuery REGISTERED AS zqSQuery
   
   // Resync this Query with every related Report (Packaged Query) that uses it.
   FOR EACH zqSQuery.UsingReport 
      ResyncQueryToReport( zqSQuery )
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_EmailMergeDocuments
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_EmailMergeDocuments( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sHost      REGISTERED AS sHost
   VIEW mConList   BASED ON LOD  mConList
   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW wWebXfer   BASED ON LOD wWebXfer
   STRING ( 5000 ) szEmailErrors
   STRING ( 500 )  szMsg
   STRING ( 10 )   szEmailCount
   STRING ( 10 )   szMaxEmailCount
   STRING ( 200 )  szLangConv1
   STRING ( 200 )  szLangConv2
   STRING ( 200 )  szLangConv3
   INTEGER         EmailCount
   
   GET VIEW mConList NAMED "mConListMergeDocs"
   
   // Make sure that the number of entries to Email does not exceed in the maximum number of Group Emails that can be sent.
   IF sHost.Host.EmailMaximumGroupSend = ""
      MessageSend( ViewToWindow, "", "EmailMerge", "The 'Host Maximum Group Email' value must be set to send Group Emails.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   EmailCount = 0
   FOR EACH mConList.ContactListItem WHERE mConList.ContactListItem.wSelected = "Y"
      EmailCount = EmailCount + 1
   END
   IF EmailCount > sHost.Host.EmailMaximumGroupSend 
      // Send Email with both current Email Count and Maximum Email Count.
      szMaxEmailCount = sHost.Host.EmailMaximumGroupSend 
      szEmailCount = EmailCount
      szLangConv1 = "The number of Emails to be sent, "
      szLangConv2 = ", exceeds the maximum number of "
      szLangConv3 = ", which is defined for the Host. No Emails will be sent."
      szMsg = szLangConv1 + szEmailCount + szLangConv2 + szMaxEmailCount + szLangConv3
      MessageSend( ViewToWindow, "", "EmailMerge", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Set up the work areas for Emailing Merge Documents.
   
   // Null out specification values.
   wXferO.QueryValues.UseHostEmailAsSenderAddress = ""
   wXferO.QueryValues.UseUserEmailAsSenderAddress = ""
   
   // Initialize Work object.
   GET VIEW wWebXfer NAMED "wWebXfer"
   IF RESULT < 0
      ACTIVATE wWebXfer EMPTY 
      NAME VIEW wWebXfer "wWebXfer"
      CREATE ENTITY wWebXfer.Work  
   ELSE
      FOR EACH wWebXfer.EmailListEntry 
         DELETE ENTITY wWebXfer.EmailListEntry NONE 
      END
   END
   
   // Make sure QueryValues entity exists.
   IF wXferO.QueryValues DOES NOT EXIST
      CREATE ENTITY wXferO.QueryValues  
   END
   
   // Set up list of Email Recipients, along with error message of any without addresses.
   szEmailErrors = "Note that the following entries do not have Email Addresses:"
   FOR EACH mConList.ContactListItem
      IF mConList.ContactListItem.wSelected = "Y"
         CREATE ENTITY wWebXfer.EmailListEntry 
         wWebXfer.EmailListEntry.PersonName   = mConList.ContactListItemStudentPerson.dFullNameLFM 
         wWebXfer.EmailListEntry.eMailAddress = mConListX.ContactListItemStudentPerson.PreferredEmail
         wWebXfer.EmailListEntry.ID           = mConList.ContactListItemStudent.ID 
         
         IF mConList.ContactListItemStudentPerson.PreferredEmail = ""
            szEmailErrors = szEmailErrors + NEW_LINE + mConList.ContactListItemStudentPerson.dFullNameLFM
         END
      END
      IF szEmailErrors != "Note that the following entries do not have Email Addresses:"
         MessageSend( ViewToWindow, "", "", szEmailErrors, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: EMAIL_MergedDocumentsReuse
**    
*************************************************************************************************/
DIALOG OPERATION
EMAIL_MergedDocumentsReuse( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sHost      REGISTERED AS sHost 
   VIEW mUser      REGISTERED AS mUser
   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW zqMDocOLST REGISTERED AS zqMDocOLST
   VIEW mConList   BASED ON LOD  mConList
   VIEW mCntHist   BASED ON LOD  mCntHist
   VIEW QueryView 
   VIEW vQualObject
   VIEW ResultSet 
   STRING ( 50 )   szObjectName
   STRING ( 50 )   szRootEntityName
   STRING ( 500 )  szTemplateDirectoryFileName
   STRING ( 500 )  szOutputDirectoryFileName
   STRING ( 500 )  szMsg
   STRING ( 500 )  szRecipientEmailAddress
   STRING ( 500 )  szUserEmailAddress
   STRING ( 500 )  szSubjectText
   STRING ( 500 )  szAttachmentFileName
   STRING ( 500 )  szSendError
   STRING ( 1000 ) szEmailErrors
   STRING ( 2000 ) szErrorMsg
   STRING ( 2000 ) szLangConv 
   STRING ( 500000000 ) szMessageBody
   INTEGER nRC
   INTEGER FileHandleInput
   
   // Process any TXT or HTML email template and email the result to the entries in the list.
   
   // The Merge Document must be of email type text or HTML for this function.
   IF zqMDocOLST.Document.DocType != "T" AND zqMDocOLST.Document.DocType != "H"
      MessageSend( ViewToWindow, "", "", "Only Documents of Type TXT or HTML can be emailed.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Make sure template and output files are specified.
   szTemplateDirectoryFileName = zqMDocOLST.Document.TemplateFileName
   szOutputDirectoryFileName   = zqMDocOLST.Document.OutputFileName
   szSubjectText               = zqMDocOLST.Document.EmailSubjectTitle 
   IF szTemplateDirectoryFileName = "" OR szOutputDirectoryFileName = ""
      MessageSend( ViewToWindow, "", "", "The Document Definition does not include both a template and an output file name.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // One and only one Sender type can be specified.
   IF wXferO.QueryValues.UseHostEmailAsSenderAddress = "" AND wXferO.QueryValues.UseUserEmailAsSenderAddress = ""
      MessageSend( ViewToWindow, "", "", "Either the Host or User must be selected as Sender.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   IF wXferO.QueryValues.UseHostEmailAsSenderAddress = "Y" AND wXferO.QueryValues.UseUserEmailAsSenderAddress = "Y"
      MessageSend( ViewToWindow, "", "", "Only one Sender (Host or User) can be selected.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
// *** NOTE THAT THIS IS WORKING CURRENTLY ONLY FOR STUDENT CONTACT LIST.(DonC 3/9/2020)
   
   // Make sure each selected Student has a Preferred Email Address specified.
   GET VIEW mConList NAMED "mConList"
   FOR EACH mConList.ContactListItem WHERE mConList.ContactListItem.wSelected = "Y"
      IF mConList.ContactListItemStudentPerson.PreferredEmail = ""
         szMsg = "Student " + mConList.ContactListItemStudentPerson.dFullNameLFM + " is missing a Preferred Email Adress. The function is aborted"
         MessageSend( ViewToWindow, "", "", szMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
   END
   
   szTemplateDirectoryFileName = zqMDocOLST.Document.UploadDirectory + zqMDocOLST.Document.TemplateFileName
   szOutputDirectoryFileName   = zqMDocOLST.Document.OutputFileName
   IF szTemplateDirectoryFileName = "" OR szOutputDirectoryFileName = ""
      MessageSend( ViewToWindow, "", "", 
                   "The Document Definition does not include both a template and an output file name.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Determine is Sender is considered to be User or Host.
   IF wXferO.QueryValues.UseUserEmailAsSenderAddress = "Y" 
      // Sender is User.
      IF mUser.User.eMailAddress = ""
         MessageSend( ViewToWindow, "", "", 
                      "The Email Address has not been specified for the User.", 
                      zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
      szUserEmailAddress = mUser.User.eMailAddress 
   ELSE
      // Sender is Host and depends on Functional Area.
      IF sAppMgr.FunctionalArea.FunctionalAreaName = "Academics"
         // For Academics, use sHost.EmailSendingAddressForRegistrar 
         IF sHost.Host.EmailSendingAddressForRegistrar = ""
            MessageSend( ViewToWindow, "", "", 
                         "Sender Address for Registrar has  not been set up in Host.", 
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN 2
         END
         szUserEmailAddress = sHost.Host.EmailSendingAddressForRegistrar 
      ELSE
         // Other Student use sHost.EmailSendingAddressForSA 
         IF sHost.Host.EmailSendingAddressForSA = ""
            MessageSend( ViewToWindow, "", "", 
                         "Sender Address for SA has  not been set up in Host.", 
                         zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
            RETURN 2
         END
         szUserEmailAddress = sHost.Host.EmailSendingAddressForSA 
      END
   END
   
   // Delete any existing ActivateID_List entries in preparation for activates below.
   FOR EACH wXferO.ActivateID_List 
      DELETE ENTITY wXferO.ActivateID_List NONE 
   END
   
   // Activate LOD to get RootEntityName.
   szObjectName = zqMDocOLST.Document.ObjectName 
   nRC = ActivateQueryViewByName( ViewToWindow, QueryView, szObjectName )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "", "Document object could not be activated.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   NAME VIEW QueryView "QueryViewEmail"
   szRootEntityName = QueryView.LOD_EntityParent.Name
   DropObjectInstance( QueryView )
   
   // Loop through each selected Student, generate the email and send it.
   FOR EACH mConList.ContactListItem WHERE mConList.ContactListItem.wSelected = "Y"
      // Format Email Document and send for each selected Student.
      CREATE ENTITY wXferO.ActivateID_List 
      wXferO.ActivateID_List.ID = mConList.ContactListItemStudent.ID  
      GenerateQualFromEntityList( vQualObject, wXferO, "ActivateID_List", "", 0 )
      NAME VIEW vQualObject "vQualObjectMergeEmail"
      
      ActivateObjectInstance( ResultSet, szObjectName, ViewToWindow, vQualObject, zSINGLE )
      NAME VIEW ResultSet "ResultSetEmail"
      nRC = InsertOI_DataIntoTemplateFile( ResultSet, 
                                           szOutputDirectoryFileName,
                                           szTemplateDirectoryFileName, 
                                           szRootEntityName )
      IF nRC != 0
         MessageSend( ResultSet, "", "", "Error in Template Merge", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
      
      // Read the generated email message into memory for SendEmail function.
      FileHandleInput = SysOpenFile( ResultSet, szOutputDirectoryFileName, COREFILE_READ )
      IF FileHandleInput < 0
         MessageSend( ResultSet, "", "", "Merged Output File could not be opened.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
         RETURN 2
      END
      nRC = SysReadFile( ResultSet, FileHandleInput, szMessageBody, 50000000 )
      SysCloseFile( ResultSet, FileHandleInput, 0 )
      
      // Recipient is either Preferred Email Address or entered address.
      IF wXferO.QueryValues.TestRecipientEmailAddress != ""
         szRecipientEmailAddress = wXferO.QueryValues.TestRecipientEmailAddress
      ELSE
         szRecipientEmailAddress = mConList.ContactListItemStudentPerson.PreferredEmail 
      END
// sHost.Host.SMTPPort     = 587   
// sHost.Host.SMTPServer   = "smtp.office365.com"
 
      
      nRC = SendEmail(sHost, szUserEmailAddress, szRecipientEmailAddress, "","", szSubjectText, szMessageBody, szAttachmentFileName, szSendError )
      IF nRC >= 0
         // Create Contact entry if requested.
         IF wXferO.QueryValues.GenerateContactActivityFlag = "Y" 
            ACTIVATE mCntHist EMPTY
            CREATE ENTITY mCntHist.ContactActivity 
            SetAttributeFromCurrentDateTime( mCntHist, "ContactActivity", "CompletedDateTime" )
            mCntHist.ContactActivity.Type           = "6"    // Type is Email
            mCntHist.ContactActivity.Note           = "Sent Merge Document: " + zqMDocOLST.Document.Name + "."
            mCntHist.ContactActivity.FunctionalArea = sAppMgr.FunctionalArea.FunctionalAreaName 
            INCLUDE mCntHist.Student  FROM mConList.ContactListItemStudent 
            INCLUDE mCntHist.User     FROM mUser.User
            COMMIT mCntHist
            DropObjectInstance( mCntHist )
         END
      
      ELSE
         IF szEmailErrors != ""
            szEmailErrors = szEmailErrors + "," + NEW_LINE
         END
         // We must give an error for each Student that was not emailed.
         szEmailErrors = szEmailErrors + mConList.ContactListItemStudentPerson.dFullNameLFM  
         IF szSendError != ""
            szEmailErrors = szEmailErrors + " (" + szSendError + ")"
         END
      END
      
      DELETE ENTITY wXferO.ActivateID_List
   END
   
   IF  szEmailErrors != ""
      GetMessageConv( szLangConv,ViewToWindow,"Due to an error, emails were not sent to the following recipient(s)","EmailError" )
      szErrorMsg = szLangConv + ": " + NEW_LINE + NEW_LINE + szEmailErrors 
      MessageSend( ViewToWindow, "", "Send Email", szErrorMsg, zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   END

END

/*************************************************************************************************
**    
**    OPERATION: EMAILTEST_MergeDocuments
**    
*************************************************************************************************/
DIALOG OPERATION
EMAILTEST_MergeDocuments( VIEW ViewToWindow )

   VIEW wXferO REGISTERED AS wXferO
   INTEGER nRC

   // Execute the EMAIL_MergedDocumentsReuse operation after making sure the TestRecipientEmailAddress is specified.
   
   IF wXferO.QueryValues.TestRecipientEmailAddress = ""
      MessageSend( ViewToWindow, "", "Send Email", 
                   "The Test Recipient Email Address must be specified for this option.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   nRC = EMAIL_MergedDocumentsReuse( ViewToWindow )
   RETURN nRC

END

/*************************************************************************************************
**    
**    OPERATION: EMAIL_MergedDocuments
**    
*************************************************************************************************/
DIALOG OPERATION
EMAIL_MergedDocuments( VIEW ViewToWindow )

   VIEW wXferO REGISTERED AS wXferO
   INTEGER nRC

   // Execute the EMAIL_MergedDocumentsReuse operation after making sure the TestRecipientEmailAddress is NOT specified. 
   
   IF wXferO.QueryValues.TestRecipientEmailAddress != ""
      MessageSend( ViewToWindow, "", "Send Email", 
                   "The Test Recipient Email Address cannot be specified for this option.", 
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   nRC = EMAIL_MergedDocumentsReuse( ViewToWindow )
   RETURN nRC

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildDocCategoryMaintList
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildDocCategoryMaintList( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW sHost      REGISTERED AS sHost
   VIEW sAppMgr    REGISTERED AS sAppMgr
   VIEW zqCDocOLST BASED ON LOD zqCDocO
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   INTEGER        nRC

   STRING ( 100 ) szLangConv
   
   GetTextConv(szLangConv,ViewToWindow,"Document Categories","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
   GET VIEW zqCDocOLST NAMED "zqCDocOLST"
   IF RESULT < 0
       ACTIVATE zqCDocOLST RootOnlyMultiple
       NAME VIEW zqCDocOLST "zqCDocOLST"  
       OrderEntityForView( zqCDocOLST, "DocumentCategory", "Name A" )
       SET CURSOR FIRST zqCDocOLST.DocumentCategory    
   END
 
END

/*************************************************************************************************
**    
**    OPERATION: PostbuildDocCategories
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildDocCategories( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW sHost     REGISTERED AS sHost
   VIEW sAppMgr   REGISTERED AS sAppMgr
   VIEW vTZCMLPLO
   STRING ( 200 ) szFileName
   STRING ( 1 )   szFirstCharacter
   STRING ( 100 ) szLangConv
   INTEGER        nRC
   
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Document Category","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
   
END

/*************************************************************************************************
**    
**    OPERATION: CANCEL_DocCategory
**    
*************************************************************************************************/
DIALOG OPERATION
CANCEL_DocCategory( VIEW ViewToWindow )

   VIEW zqCDocO REGISTERED AS zqCDocO

   DropObjectInstance( zqCDocO )

END

/*************************************************************************************************
**    
**    OPERATION: SAVE_DocCategory
**    
*************************************************************************************************/
DIALOG OPERATION
SAVE_DocCategory( VIEW ViewToWindow )

   VIEW zqCDocO2   BASED ON LOD  zqCDocO
   VIEW zqCDocO    REGISTERED AS zqCDocO
   VIEW zqCDocOLST REGISTERED AS zqCDocOLST
   STRING ( 4 ) Suffix
   
   // Make sure that Category Name is entered and that it is unique.
   IF zqCDocO.DocumentCategory.Name = ""
      MessageSend( ViewToWindow, "Categoryreq", "", "Category is required.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   ACTIVATE zqCDocO2 WHERE zqCDocO2.DocumentCategory.Name = zqCDocO.DocumentCategory.Name 
                        AND zqCDocO2.DocumentCategory.ID  != zqCDocO.DocumentCategory.ID 
   IF RESULT >= 0 
      MessageSend( ViewToWindow, "", "", "A Category by that Name currently exists.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END

   // Commit document.
   COMMIT zqCDocO
   IF RESULT < 0
      MessageSend( ViewToWindow, "", "", "DB Error - Contact Systems Support", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Reactivate the list.
   DropObjectInstance( zqCDocOLST )

END

/*************************************************************************************************
**    
**    OPERATION: CLOSE_DocCategoryMaintList
**    
*************************************************************************************************/
DIALOG OPERATION
CLOSE_DocCategoryMaintList( VIEW ViewToWindow )

   VIEW zqCDocOLST BASED ON LOD  zqCDocO

   GET VIEW zqCDocOLST NAMED "zqCDocOLST"
   IF RESULT >= 0
      DropObjectInstance( zqCDocOLST )
   END

END

/*************************************************************************************************
**    
**    OPERATION: DELETE_DocCategory
**    
*************************************************************************************************/
DIALOG OPERATION
DELETE_DocCategory( VIEW ViewToWindow )


   VIEW zqCDocOLST REGISTERED AS zqCDocOLST
   VIEW zqCDocO    BASED ON LOD  zqCDocO
   SHORT nRC
   
   // Make sure that the Category isn't assigned to a Query, and if it isn't, simply delete it..
   ACTIVATE zqCDocO SingleForUpdate WHERE zqCDocO.DocumentCategory.ID = zqCDocOLST.DocumentCategory.ID 
   NAME VIEW zqCDocO "zqCDocODelete"
   IF zqCDocO.Document EXISTS
      MessageSend( ViewToWindow, "", "", "A Category used by Documents cannot be deleted.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      DropObjectInstance( zqCDocO )
      RETURN 2
   END
   DELETE ENTITY zqCDocO.DocumentCategory
   COMMIT zqCDocO
   DropObjectInstance( zqCDocO )

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_DocCategoryNew
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_DocCategoryNew( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS wXferO
   VIEW mUser   REGISTERED AS mUser
   VIEW sAppMgr REGISTERED AS sAppMgr
   VIEW zqCDocO BASED ON LOD  zqCDocO
   
   // Initialize empty Category object.
   ACTIVATE zqCDocO EMPTY
   CREATE ENTITY zqCDocO.DocumentCategory
   NAME VIEW zqCDocO "zqCDocO"

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_DocCategoryUpdate
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_DocCategoryUpdate( VIEW ViewToWindow )

   VIEW zqCDocOLST REGISTERED AS zqCDocOLST
   VIEW zqCDocO    BASED ON LOD  zqCDocO

   ACTIVATE zqCDocO SingleForUpdate WHERE zqCDocO.DocumentCategory.ID = zqCDocOLST.DocumentCategory.ID
   NAME VIEW zqCDocO "zqCDocO"

END

/*************************************************************************************************
**    
**    OPERATION: SHOW_ParentPath
**    
*************************************************************************************************/
DIALOG OPERATION
SHOW_ParentPath( VIEW ViewToWindow )

   VIEW zqFrame  REGISTERED AS zqFrame
   VIEW zqFrame2 BASED ON LOD  zqFrame
   STRING ( 32 ) szParentName
   
   // Build path of parent entities.
   CreateViewFromView( zqFrame2, zqFrame )
   szParentName = zqFrame2.DisplayTreeEntity.EntityName 
   // Loop through each Parent until a null is found.
   LOOP WHILE szParentName != ""
      CREATE ENTITY zqFrame2.DisplayPath BEFORE 
      zqFrame2.DisplayPath.Name       = zqFrame2.DisplayTreeEntity.Name 
      zqFrame2.DisplayPath.EntityName = zqFrame2.DisplayTreeEntity.EntityName 
      szParentName = zqFrame2.DisplayTreeEntity.ParentEntityName 
      SET CURSOR FIRST zqFrame2.DisplayTreeEntity WHERE zqFrame2.DisplayTreeEntity.EntityName = szParentName
   END
   DropView( zqFrame2 )
   SET CURSOR FIRST zqFrame.DisplayPath  

END


/*************************************************************************************************
**    
**    OPERATION: GOTO_GeneralQuery
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_GeneralQuery( VIEW ViewToWindow )

   VIEW wXferO  REGISTERED AS  wXferO
   VIEW sAppMgr REGISTERED AS sAppMgr
   VIEW mUser   REGISTERED AS mUser
   VIEW mQryObj BASED ON LOD  mQryObj
   INTEGER nRC
   STRING ( 6 )  szPermissions 
   
   // Set up list of Query View objects.

   nRC = SectionAccessAllowed( mUser, "",  sAppMgr.FunctionalArea.FunctionalAreaName, sAppMgr.FunctionalSubArea.FunctionalSubAreaName, szPermissions )
   IF  nRC < 0 OR szPermissions = "     "
      MessageSend ( ViewToWindow, "AccDenied", "Access",
                    "Access is denied by your security settings.",
                    zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      SetWindowActionBehavior( ViewToWindow, zWAB_StayOnWindow, "", "" )
      RETURN 2
   END
   
   SET CURSOR FIRST sAppMgr.FunctionalSubArea 
              WHERE sAppMgr.FunctionalSubArea.FunctionalSubAreaName = "Custom Queries"
   IF sAppMgr.SplitWindow DOES not EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 

   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr 

   // Remove any current entries.
   IF wXferO.QueryValues EXISTS
      DELETE ENTITY wXferO.QueryValues  
   END
   BuildQueryObjectList( mQryObj, ViewToWindow, "" )
   
   SET CURSOR FIRST wXferO.QueryObject

END

/*************************************************************************************************
**    
**    OPERATION: DOWNLOADTemplate
**    
*************************************************************************************************/
DIALOG OPERATION
DOWNLOADTemplate( VIEW ViewToWindow )

   VIEW wXferO     REGISTERED AS wXferO
   VIEW zqMDocO    REGISTERED AS zqMDocO

   wXferO.Root.WorkFileName = zqMDocO.Document.UploadDirectory + zqMDocO.Document.TemplateFileName 
   
END

/*************************************************************************************************
**    
**    OPERATION: GOTO_QueryObjectExtension
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_QueryObjectExtension( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW mQryObj     BASED ON LOD  mQryObj
   VIEW zqObjExt    BASED ON LOD  zqObjExt
   VIEW mQryObExLST BASED ON LOD  mQryObEx
   VIEW zqFrame     BASED ON LOD  zqFrame
   VIEW QueryView
   INTEGER nRC
   STRING ( 32 )  szEntityName
   STRING ( 50 )  szEntityNamePrefix
   INTEGER        IndentLevel

   // Activate the list of Query Object Extensions for the current Query Object.
   ACTIVATE mQryObExLST Multiple WHERE mQryObExLST.QueryObjectExtension.ObjectName = wXferO.QueryObject.ObjectName
   NAME VIEW mQryObExLST "mQryObExLST"
   OrderEntityForView( mQryObExLST, "QueryObjectExtension", "ExtensionName A" )
   SET CURSOR FIRST mQryObExLST.QueryObjectExtension  
   
   // Set up a zqFrame object instance for the Query Object to be used in Entity/Attribute mapping.

   GET VIEW QueryView NAMED "QueryView"
   IF RESULT >= 0
      DropObjectInstance( QueryView )
   END
  
   // Activate the LOD (Query View) requested.
   nRC= ActivateQueryViewByName( ViewToWindow, QueryView, wXferO.QueryObject.ObjectName )
   IF nRC < 0
      MessageSend( ViewToWindow, "", "Select Query",
                   "Query LOD cannot be loaded.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   NAME VIEW QueryView "QueryView"

   // Create initial zqFrame from the LOD just activated.
   GET VIEW zqFrame NAMED "zqFrame"
   IF RESULT >= 0
      DropObjectInstance( zqFrame )
   END
   
   ACTIVATE zqFrame EMPTY
   CREATE ENTITY zqFrame.zqFrame
   NAME VIEW zqFrame "zqFrame"
   zqFrame.zqFrame.QueryObjectName           = QueryView.LOD.Name
   zqFrame.zqFrame.QueryObjectRootEntityName = QueryView.LOD_EntityParent.Name
   
   // Build the Display Tree Values fresh.
   FOR EACH zqFrame.DisplayTreeEntity 
      DELETE ENTITY zqFrame.DisplayTreeEntity NONE 
   END
   FOR EACH QueryView.LOD_Entity
      CREATE ENTITY zqFrame.DisplayTreeEntity 
      szEntityName = QueryView.LOD_Entity.Name
      IndentLevel =  QueryView.LOD_Entity.IndentLvl
      IF IndentLevel = 1
         // The Entity Name is not indented at all.
         zqFrame.DisplayTreeEntity.Name       = szEntityName
         zqFrame.DisplayTreeEntity.EntityName = szEntityName
      ELSE
         // The Entity Name is indented based on the Indent Level.
         szEntityNamePrefix = ""
         LOOP WHILE IndentLevel > 0
            szEntityNamePrefix = szEntityNamePrefix + "....."
            IndentLevel = IndentLevel - 3
         END
         zqFrame.DisplayTreeEntity.Name       = szEntityNamePrefix + szEntityName
         zqFrame.DisplayTreeEntity.EntityName = szEntityName
      END
      FOR EACH QueryView.LOD_Attribute
         CREATE ENTITY zqFrame.DisplayTreeAttribute 
         zqFrame.DisplayTreeAttribute.Name = QueryView.ER_Attribute.Name
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: SELECT_DESELECT_QO_Extension
**    
*************************************************************************************************/
DIALOG OPERATION
SELECT_DESELECT_QO_Extension( VIEW ViewToWindow )

   VIEW zqFrame      REGISTERED AS zqFrame
   VIEW mQryObExLST  REGISTERED AS mQryObExLST
   VIEW zqObjExt     BASED ON LOD  zqObjExt
   
   // Create the ObjectExtension object from the blob for the selected Extension entry.
   // If none was selected, delete any current zqFrame Extension subobject entries.
   
   // Start by deleting current entries.
   IF zqFrame.SelectedObjectExtensionSummary EXISTS
      DELETE ENTITY zqFrame.SelectedObjectExtensionSummary  
   END
   GET VIEW zqObjExt NAMED "zqObjExt"
   IF RESULT >= 0
      DropObjectInstance( zqObjExt )
   END
   
   // If an Extension entry has been selected, set up the SelectedObjectExtensionSummary subobject identifying the new Extension.
   // If an Extension entry has NOT been selected, we need to do nothing as any current entry was removed above.
   IF zqFrame.SelectedQueryObjectExtension EXISTS
      // Add the selected Summary Entry and Attributes to the zqFrame.SelectedObjectExtensionSummary subobject, deleting any current entry.
      SET CURSOR FIRST mQryObExLST.QueryObjectExtension WHERE mQryObExLST.QueryObjectExtension.ID = zqFrame.SelectedQueryObjectExtension.ID  
      SetOI_FromBlob( zqObjExt, 0, ViewToWindow,
                      mQryObExLST, "QueryObjectExtension", "QueryExtensionBlob", zIGNORE_ERRORS )
      NAME VIEW zqObjExt "zqObjExt"
      
      IF zqFrame.SelectedObjectExtensionSummary EXISTS 
         DELETE ENTITY zqFrame.SelectedObjectExtensionSummary 
      END
      CREATE ENTITY zqFrame.SelectedObjectExtensionSummary 
      SetMatchingAttributesByName( zqFrame, "SelectedObjectExtensionSummary", zqObjExt, "SummaryEntry", zSET_ALL ) 
      zqFrame.SelectedObjectExtensionSummary.ID = zqFrame.SelectedQueryObjectExtension.ID 
      FOR EACH zqObjExt.SummarySelectionCriteria 
         CREATE ENTITY zqFrame.SummaryDisplayAttribute 
         zqFrame.SummaryDisplayAttribute.CriteriaOrDisplay = "Criteria"
         zqFrame.SummaryDisplayAttribute.CriteriaTitle = zqObjExt.SummarySelectionCriteria.Title 
      END
      FOR EACH zqObjExt.SummaryDisplayAttribute 
         CREATE ENTITY zqFrame.SummaryDisplayAttribute 
         zqFrame.SummaryDisplayAttribute.CriteriaOrDisplay = "Attribute"
         zqFrame.SummaryDisplayAttribute.DisplayName = zqObjExt.SummaryDisplayAttribute.DisplayName 
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: TEST_GraphFromFile
**    
*************************************************************************************************/
DIALOG OPERATION
TEST_GraphFromFile( VIEW ViewToWindow )

   VIEW zqFrame BASED ON LOD zqFrame
   VIEW mChart  BASED ON LOD mChart
   STRING ( 500 ) szInputLine
   INTEGER nRC
   INTEGER hFileFrom
   
   // Format the Graph object with the content of file "c:\temp\GraphSample.txt".
   
   //hFileFrom = SysOpenFile( ViewToWindow, "c:\temp\GraphSample.txt", COREFILE_READ )
   hFileFrom = SysOpenFile( ViewToWindow, "c:\temp\GraphSample.txt", COREFILE_READ )
   IF hFileFrom < 0
      MessageSend( ViewToWindow, "", "", "Graph Sample File could not be opened.", zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
      RETURN 2
   END
   
   // Set up new Chart object.
   GET VIEW mChart NAMED "mChart"
   IF RESULT >= 0
      DropObjectInstance( mChart )
   END
   ACTIVATE mChart EMPTY
   NAME VIEW mChart "mChart"
   
   //NAME VIEW mChart "mChartQuery" 
   CREATE ENTITY mChart.Chart 
   mChart.Chart.Tag = "Chart1"
   mChart.Chart.Type = "Bar"
   
   // Loop through all lines in the file creating a Chart CodeLine for each.
   nRC = ReadLine5000( ViewToWindow, szInputLine, hFileFrom )
   LOOP WHILE nRC >= 1
      CREATE ENTITY mChart.CodeLine
      mChart.CodeLine.Line = szInputLine
      nRC = ReadLine5000( ViewToWindow, szInputLine, hFileFrom )
   END
   SysCloseFile( ViewToWindow, hFileFrom, 0 )

END

/*************************************************************************************************
**    
**    OPERATION: PostbuildQueryObjectsMain
**    
*************************************************************************************************/
DIALOG OPERATION
PostbuildQueryObjectsMain( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW wXferO2     BASED ON LOD  wXferO
   VIEW sHost       REGISTERED AS sHost
   VIEW sAppMgr     REGISTERED AS sAppMgr
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   VIEW wQueryWk    BASED ON LOD  wQueryWk
   STRING ( 100 ) szLangConv
   STRING ( 32 )  szAttributeName
   STRING ( 32 )  szEntityName
   INTEGER        nRC
   
   IF sAppMgr.SplitWindow DOES NOT EXIST 
      CREATE ENTITY sAppMgr.SplitWindow 
   END 
   GetTextConv(szLangConv,ViewToWindow,"Advanced Queries","")
   sAppMgr.SplitWindow.WindowName = sAppMgr.FunctionalArea.dFunctionalAreaTr +  " > " + sAppMgr.FunctionalSubArea.dFunctionalSubAreaTr +  " > " + szLangConv
     
   // Initialize 
   IF sHost.Host.QueryLODsSourceDirectory = ""
      MessageSend( ViewToWindow, "wQueryInitDir", "",
                   "You must initialize the 'Query LOD Directory' value in System Administration / Host before using Query functionality.",
                   zMSGQ_OBJECT_CONSTRAINT_ERROR, 0 )
   END
   
   // Make sure that any Execute functionality is generating a Result Set.
   wXferO.Root.CurrentFunction = "GenerateResultSet"
   
   // Make sure that combined Object/External Name attributes are built.
   IF wXferO.QueryObject.ObjectExternalCombinedName = ""
      CreateViewFromView( wXferO2, wXferO )
      FOR EACH wXferO2.QueryObject 
         wXferO2.QueryObject.ObjectExternalCombinedName = wXferO2.QueryObject.ObjectName + " / " + wXferO2.QueryObject.ExternalName 
      END
      DropView( wXferO2 )
   END
   
   // Make sure list of Queries is sorted in order.
   GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0 
      IF zqSQueryLST.StoredQuery EXISTS
         OrderEntityForView( zqSQueryLST, "StoredQuery", "wCategoryName A Name A" )
         SET CURSOR FIRST zqSQueryLST.StoredQuery 
      
          // Since a Query List exists, make sure that same object in wXferO.QueryObject.
          SET CURSOR FIRST wXferO.QueryObject WHERE wXferO.QueryObject.ObjectName = zqSQueryLST.StoredQuery.ObjectName 
      END
      
   END
   
   // Make sure Query work object exists.
   GET VIEW wQueryWk NAMED "wQueryWk"
   IF RESULT < 0
      ACTIVATE wQueryWk EMPTY 
      NAME VIEW wQueryWk "wQueryWk" 
      CREATE ENTITY wQueryWk.QueryWork 
      CREATE ENTITY wQueryWk.DerivedAttribute     // Blank entry for list 
      
      // Add esch derived attribute as a selectable work entity.
      szEntityName = "QueryWork"
      nRC = zGetFirstAttributeNameForEntity( wQueryWk, szEntityName, szAttributeName )
      LOOP WHILE nRC >= 0
         CREATE ENTITY wQueryWk.DerivedAttribute 
         wQueryWk.DerivedAttribute.AttributeName = szAttributeName 
         nRC = zGetNextAttributeNameForEntity( wQueryWk, szEntityName, szAttributeName )
      END
   END
   SET CURSOR FIRST wQueryWk.DerivedAttribute  

END

/*************************************************************************************************
**    
**    OPERATION: LIST_QueriesForSelectedObject
**    
*************************************************************************************************/
DIALOG OPERATION
LIST_QueriesForSelectedObject( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   VIEW zqSCatagLST BASED ON LOD  zqSCatag
   
   GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0
      DropObjectInstance( zqSQueryLST )
   END
   
   // Activate Queries for selected Object without User selection.
   ACTIVATE zqSQueryLST Multiple
            WHERE zqSQueryLST.StoredQuery.ObjectName = wXferO.QueryObject.ObjectName
              AND zqSQueryLST.StoredQuery.Type = "S"
   NAME VIEW zqSQueryLST "zqSQueryLST"
   
   FOR EACH zqSQueryLST.StoredQuery 
      IF zqSQueryLST.StoredQueryCategory EXISTS
         zqSQueryLST.StoredQuery.wCategoryName = zqSQueryLST.StoredQueryCategory.Name 
      END
   END
   OrderEntityForView( zqSQueryLST, "StoredQuery", "ObjectName A wCategoryName A Name A" )
   SET CURSOR FIRST zqSQueryLST.StoredQuery 

END

/*************************************************************************************************
**    
**    OPERATION: LIST_AllQueries
**    
*************************************************************************************************/
DIALOG OPERATION
LIST_AllQueries( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   VIEW zqSCatagLST BASED ON LOD  zqSCatag
   
   GET VIEW zqSQueryLST NAMED "zqSQueryLST"
   IF RESULT >= 0
      DropObjectInstance( zqSQueryLST )
   END
   
   // Activate all Queries without User selection.
   ACTIVATE zqSQueryLST Multiple
            WHERE zqSQueryLST.StoredQuery.Type = "S"
   NAME VIEW zqSQueryLST "zqSQueryLST"
   
   FOR EACH zqSQueryLST.StoredQuery 
      IF zqSQueryLST.StoredQueryCategory EXISTS
         zqSQueryLST.StoredQuery.wCategoryName = zqSQueryLST.StoredQueryCategory.Name 
      END
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_ProcessQuery
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_ProcessQuery( VIEW ViewToWindow )

   VIEW wXferO      REGISTERED AS wXferO
   VIEW zqSQueryLST BASED ON LOD  zqSQuery
   VIEW zqSCatagLST BASED ON LOD  zqSCatag

   // Activate the Query list and indicate that have been listed.
   wXferO.QueryValues.SelectQueryListAllFlag = "Y"
   wXferO.Root.CurrentFunction = "GenerateResultSet"
   
   // Make sure list of Stored Query Catagories exists.
   GET VIEW zqSCatagLST NAMED "zqSCatagLST"
   IF RESULT < 0
       ACTIVATE zqSCatagLST RootOnlyMultiple
       NAME VIEW zqSCatagLST "zqSCatagLST"    
   END

END

/*************************************************************************************************
**    
**    OPERATION: GOTO_LanguageConversion
**    
*************************************************************************************************/
DIALOG OPERATION
GOTO_LanguageConversion( VIEW ViewToWindow )

   VIEW wXferO    REGISTERED AS wXferO
   VIEW zqLangLST BASED ON LOD  zqLang
   STRING ( 20 ) szSelectedLanguage

   // If a Language to Covert has been chosen, activate entries for that Language.
   // Otherwise, make sure Language list doesn't exist.
   
   // Drop current list if it exists.
   GET VIEW zqLangLST NAMED "zqLangLST"
   IF RESULT >= 0
      DropObjectInstance( zqLangLST )
   END
   
   // Same as code in operaiton, wQueryR.SELECT_LanguageForConversion.
   szSelectedLanguage = wXferO.Root.LanguageSelection
   IF szSelectedLanguage != ""
      ACTIVATE zqLangLST Multiple WHERE zqLangLST.OriginalDialogText.IsAdvancedQuery = "Y"
            RESTRICTING zqLangLST.LanguageText TO zqLangLST.LanguageText.Language = szSelectedLanguage
      NAME VIEW zqLangLST "zqLangLST"
      OrderEntityForView( zqLangLST, "OriginalDialogText", "UniqueTextValue A" )
   END
   
   // Make sure each original language entry has a LanguageText entry for selected Language.
   FOR EACH zqLangLST.OriginalDialogText 
      IF zqLangLST.LanguageText DOES NOT EXIST
         CREATE ENTITY zqLangLST.LanguageText 
         zqLangLST.LanguageText.Language = szSelectedLanguage
      END
   END
   
   //  Initialize original value.
   FOR EACH zqLangLST.OriginalDialogText 
      zqLangLST.LanguageText.wOriginalValue = zqLangLST.LanguageText.TextValue 
   END
   SET CURSOR FIRST zqLangLST.OriginalDialogText
      
END
